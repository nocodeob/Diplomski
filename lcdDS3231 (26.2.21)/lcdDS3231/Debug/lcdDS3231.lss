
lcdDS3231.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000242e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e4  00800060  0000242e  000024c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000be  00800244  00800244  000026a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038a3  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba1  00000000  00000000  000061d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b7  00000000  00000000  00006d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  0000872c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000854  00000000  00000000  00008ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002319  00000000  00000000  000094f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000b811  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4b 07 	call	0xe96	; 0xe96 <main>
      8a:	0c 94 15 12 	jmp	0x242a	; 0x242a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
      92:	11 b8       	out	0x01, r1	; 1
      94:	8f e2       	ldi	r24, 0x2F	; 47
      96:	80 b9       	out	0x00, r24	; 0
      98:	08 95       	ret

0000009a <I2C_Start>:
      9a:	94 ea       	ldi	r25, 0xA4	; 164
      9c:	96 bf       	out	0x36, r25	; 54
      9e:	06 b6       	in	r0, 0x36	; 54
      a0:	07 fe       	sbrs	r0, 7
      a2:	fd cf       	rjmp	.-6      	; 0x9e <I2C_Start+0x4>
      a4:	91 b1       	in	r25, 0x01	; 1
      a6:	98 7f       	andi	r25, 0xF8	; 248
      a8:	98 30       	cpi	r25, 0x08	; 8
      aa:	71 f4       	brne	.+28     	; 0xc8 <I2C_Start+0x2e>
      ac:	83 b9       	out	0x03, r24	; 3
      ae:	84 e8       	ldi	r24, 0x84	; 132
      b0:	86 bf       	out	0x36, r24	; 54
      b2:	06 b6       	in	r0, 0x36	; 54
      b4:	07 fe       	sbrs	r0, 7
      b6:	fd cf       	rjmp	.-6      	; 0xb2 <I2C_Start+0x18>
      b8:	81 b1       	in	r24, 0x01	; 1
      ba:	88 7f       	andi	r24, 0xF8	; 248
      bc:	88 31       	cpi	r24, 0x18	; 24
      be:	31 f0       	breq	.+12     	; 0xcc <I2C_Start+0x32>
      c0:	80 32       	cpi	r24, 0x20	; 32
      c2:	31 f4       	brne	.+12     	; 0xd0 <I2C_Start+0x36>
      c4:	82 e0       	ldi	r24, 0x02	; 2
      c6:	08 95       	ret
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	08 95       	ret
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	08 95       	ret
      d0:	83 e0       	ldi	r24, 0x03	; 3
      d2:	08 95       	ret

000000d4 <I2C_Repeated_Start>:
      d4:	94 ea       	ldi	r25, 0xA4	; 164
      d6:	96 bf       	out	0x36, r25	; 54
      d8:	06 b6       	in	r0, 0x36	; 54
      da:	07 fe       	sbrs	r0, 7
      dc:	fd cf       	rjmp	.-6      	; 0xd8 <I2C_Repeated_Start+0x4>
      de:	91 b1       	in	r25, 0x01	; 1
      e0:	98 7f       	andi	r25, 0xF8	; 248
      e2:	90 31       	cpi	r25, 0x10	; 16
      e4:	71 f4       	brne	.+28     	; 0x102 <I2C_Repeated_Start+0x2e>
      e6:	83 b9       	out	0x03, r24	; 3
      e8:	84 e8       	ldi	r24, 0x84	; 132
      ea:	86 bf       	out	0x36, r24	; 54
      ec:	06 b6       	in	r0, 0x36	; 54
      ee:	07 fe       	sbrs	r0, 7
      f0:	fd cf       	rjmp	.-6      	; 0xec <I2C_Repeated_Start+0x18>
      f2:	81 b1       	in	r24, 0x01	; 1
      f4:	88 7f       	andi	r24, 0xF8	; 248
      f6:	80 34       	cpi	r24, 0x40	; 64
      f8:	31 f0       	breq	.+12     	; 0x106 <I2C_Repeated_Start+0x32>
      fa:	80 32       	cpi	r24, 0x20	; 32
      fc:	31 f4       	brne	.+12     	; 0x10a <I2C_Repeated_Start+0x36>
      fe:	82 e0       	ldi	r24, 0x02	; 2
     100:	08 95       	ret
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	08 95       	ret
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	08 95       	ret
     10a:	83 e0       	ldi	r24, 0x03	; 3
     10c:	08 95       	ret

0000010e <I2C_Stop>:
     10e:	84 e9       	ldi	r24, 0x94	; 148
     110:	86 bf       	out	0x36, r24	; 54
     112:	06 b6       	in	r0, 0x36	; 54
     114:	04 fc       	sbrc	r0, 4
     116:	fd cf       	rjmp	.-6      	; 0x112 <I2C_Stop+0x4>
     118:	08 95       	ret

0000011a <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     11a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     11c:	84 e8       	ldi	r24, 0x84	; 132
     11e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     120:	06 b6       	in	r0, 0x36	; 54
     122:	07 fe       	sbrs	r0, 7
     124:	fd cf       	rjmp	.-6      	; 0x120 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     126:	81 b1       	in	r24, 0x01	; 1
     128:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     12a:	88 32       	cpi	r24, 0x28	; 40
     12c:	21 f0       	breq	.+8      	; 0x136 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     12e:	80 33       	cpi	r24, 0x30	; 48
     130:	21 f4       	brne	.+8      	; 0x13a <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     13a:	82 e0       	ldi	r24, 0x02	; 2
}
     13c:	08 95       	ret

0000013e <I2C_Read_Ack>:

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     13e:	84 ec       	ldi	r24, 0xC4	; 196
     140:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     142:	06 b6       	in	r0, 0x36	; 54
     144:	07 fe       	sbrs	r0, 7
     146:	fd cf       	rjmp	.-6      	; 0x142 <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     148:	83 b1       	in	r24, 0x03	; 3
}	
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret

0000014e <I2C_Read_Nack>:

int I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     14e:	84 e8       	ldi	r24, 0x84	; 132
     150:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     152:	06 b6       	in	r0, 0x36	; 54
     154:	07 fe       	sbrs	r0, 7
     156:	fd cf       	rjmp	.-6      	; 0x152 <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     158:	83 b1       	in	r24, 0x03	; 3
}	
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	08 95       	ret

0000015e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     15e:	8b b3       	in	r24, 0x1b	; 27
     160:	80 64       	ori	r24, 0x40	; 64
     162:	8b bb       	out	0x1b, r24	; 27
     164:	00 c0       	rjmp	.+0      	; 0x166 <toggle_e+0x8>
     166:	00 c0       	rjmp	.+0      	; 0x168 <toggle_e+0xa>
     168:	8b b3       	in	r24, 0x1b	; 27
     16a:	8f 7b       	andi	r24, 0xBF	; 191
     16c:	8b bb       	out	0x1b, r24	; 27
     16e:	08 95       	ret

00000170 <lcd_write>:
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	d8 2f       	mov	r29, r24
     176:	66 23       	and	r22, r22
     178:	21 f0       	breq	.+8      	; 0x182 <lcd_write+0x12>
     17a:	8b b3       	in	r24, 0x1b	; 27
     17c:	80 61       	ori	r24, 0x10	; 16
     17e:	8b bb       	out	0x1b, r24	; 27
     180:	03 c0       	rjmp	.+6      	; 0x188 <lcd_write+0x18>
     182:	8b b3       	in	r24, 0x1b	; 27
     184:	8f 7e       	andi	r24, 0xEF	; 239
     186:	8b bb       	out	0x1b, r24	; 27
     188:	8b b3       	in	r24, 0x1b	; 27
     18a:	8f 7d       	andi	r24, 0xDF	; 223
     18c:	8b bb       	out	0x1b, r24	; 27
     18e:	8a b3       	in	r24, 0x1a	; 26
     190:	8f 60       	ori	r24, 0x0F	; 15
     192:	8a bb       	out	0x1a, r24	; 26
     194:	cb b3       	in	r28, 0x1b	; 27
     196:	c0 7f       	andi	r28, 0xF0	; 240
     198:	8d 2f       	mov	r24, r29
     19a:	82 95       	swap	r24
     19c:	8f 70       	andi	r24, 0x0F	; 15
     19e:	8c 2b       	or	r24, r28
     1a0:	8b bb       	out	0x1b, r24	; 27
     1a2:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
     1a6:	df 70       	andi	r29, 0x0F	; 15
     1a8:	dc 2b       	or	r29, r28
     1aa:	db bb       	out	0x1b, r29	; 27
     1ac:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
     1b0:	cf 60       	ori	r28, 0x0F	; 15
     1b2:	cb bb       	out	0x1b, r28	; 27
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <lcd_read>:
     1ba:	88 23       	and	r24, r24
     1bc:	21 f0       	breq	.+8      	; 0x1c6 <lcd_read+0xc>
     1be:	8b b3       	in	r24, 0x1b	; 27
     1c0:	80 61       	ori	r24, 0x10	; 16
     1c2:	8b bb       	out	0x1b, r24	; 27
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <lcd_read+0x12>
     1c6:	8b b3       	in	r24, 0x1b	; 27
     1c8:	8f 7e       	andi	r24, 0xEF	; 239
     1ca:	8b bb       	out	0x1b, r24	; 27
     1cc:	8b b3       	in	r24, 0x1b	; 27
     1ce:	80 62       	ori	r24, 0x20	; 32
     1d0:	8b bb       	out	0x1b, r24	; 27
     1d2:	8a b3       	in	r24, 0x1a	; 26
     1d4:	80 7f       	andi	r24, 0xF0	; 240
     1d6:	8a bb       	out	0x1a, r24	; 26
     1d8:	8b b3       	in	r24, 0x1b	; 27
     1da:	80 64       	ori	r24, 0x40	; 64
     1dc:	8b bb       	out	0x1b, r24	; 27
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <lcd_read+0x26>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_read+0x28>
     1e2:	99 b3       	in	r25, 0x19	; 25
     1e4:	92 95       	swap	r25
     1e6:	90 7f       	andi	r25, 0xF0	; 240
     1e8:	8b b3       	in	r24, 0x1b	; 27
     1ea:	8f 7b       	andi	r24, 0xBF	; 191
     1ec:	8b bb       	out	0x1b, r24	; 27
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_read+0x36>
     1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_read+0x38>
     1f2:	8b b3       	in	r24, 0x1b	; 27
     1f4:	80 64       	ori	r24, 0x40	; 64
     1f6:	8b bb       	out	0x1b, r24	; 27
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_read+0x40>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_read+0x42>
     1fc:	89 b3       	in	r24, 0x19	; 25
     1fe:	8f 70       	andi	r24, 0x0F	; 15
     200:	2b b3       	in	r18, 0x1b	; 27
     202:	2f 7b       	andi	r18, 0xBF	; 191
     204:	2b bb       	out	0x1b, r18	; 27
     206:	89 2b       	or	r24, r25
     208:	08 95       	ret

0000020a <lcd_waitbusy>:
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	01 c0       	rjmp	.+2      	; 0x216 <lcd_waitbusy+0xc>
     214:	ec 01       	movw	r28, r24
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_read>
     21c:	88 23       	and	r24, r24
     21e:	2c f4       	brge	.+10     	; 0x22a <lcd_waitbusy+0x20>
     220:	ce 01       	movw	r24, r28
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	c8 3e       	cpi	r28, 0xE8	; 232
     226:	d3 40       	sbci	r29, 0x03	; 3
     228:	a8 f3       	brcs	.-22     	; 0x214 <lcd_waitbusy+0xa>
     22a:	85 e0       	ldi	r24, 0x05	; 5
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <lcd_waitbusy+0x24>
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_read>
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <lcd_command>:
     23e:	cf 93       	push	r28
     240:	c8 2f       	mov	r28, r24
     242:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_waitbusy>
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	8c 2f       	mov	r24, r28
     24a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write>
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <lcd_gotoxy>:
     252:	61 11       	cpse	r22, r1
     254:	04 c0       	rjmp	.+8      	; 0x25e <lcd_gotoxy+0xc>
     256:	80 58       	subi	r24, 0x80	; 128
     258:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_command>
     25c:	08 95       	ret
     25e:	80 54       	subi	r24, 0x40	; 64
     260:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_command>
     264:	08 95       	ret

00000266 <lcd_clrscr>:
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_command>
     26c:	08 95       	ret

0000026e <lcd_putc>:
     26e:	cf 93       	push	r28
     270:	c8 2f       	mov	r28, r24
     272:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_waitbusy>
     276:	ca 30       	cpi	r28, 0x0A	; 10
     278:	49 f4       	brne	.+18     	; 0x28c <lcd_putc+0x1e>
     27a:	80 34       	cpi	r24, 0x40	; 64
     27c:	10 f4       	brcc	.+4      	; 0x282 <lcd_putc+0x14>
     27e:	80 e4       	ldi	r24, 0x40	; 64
     280:	01 c0       	rjmp	.+2      	; 0x284 <lcd_putc+0x16>
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	80 58       	subi	r24, 0x80	; 128
     286:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_command>
     28a:	04 c0       	rjmp	.+8      	; 0x294 <lcd_putc+0x26>
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	8c 2f       	mov	r24, r28
     290:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_write>
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <lcd_puts>:
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	fc 01       	movw	r30, r24
     2a0:	c0 e0       	ldi	r28, 0x00	; 0
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <lcd_puts+0x12>
     2a4:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_putc>
     2a8:	f8 01       	movw	r30, r16
     2aa:	8f 01       	movw	r16, r30
     2ac:	0f 5f       	subi	r16, 0xFF	; 255
     2ae:	1f 4f       	sbci	r17, 0xFF	; 255
     2b0:	80 81       	ld	r24, Z
     2b2:	88 23       	and	r24, r24
     2b4:	19 f0       	breq	.+6      	; 0x2bc <lcd_puts+0x24>
     2b6:	cf 5f       	subi	r28, 0xFF	; 255
     2b8:	c5 31       	cpi	r28, 0x15	; 21
     2ba:	a0 f3       	brcs	.-24     	; 0x2a4 <lcd_puts+0xc>
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	08 95       	ret

000002c4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	18 2f       	mov	r17, r24
    /*
     *  Initialize LCD to 4 bit I/O mode
     */

        /* configure all port bits as output (all LCD lines on same port) */
    DDR(LCD_DATA0_PORT) |= 0x7F;
     2cc:	8a b3       	in	r24, 0x1a	; 26
     2ce:	8f 67       	ori	r24, 0x7F	; 127
     2d0:	8a bb       	out	0x1a, r24	; 26
	
	//DDRD |=(1<<PD5);
	
	DDR(LCD_PORT) |= (1<<LCD_RS_PIN)|(1<<LCD_RW_PIN)|(1<<LCD_E_PIN);
     2d2:	8a b3       	in	r24, 0x1a	; 26
     2d4:	80 67       	ori	r24, 0x70	; 112
     2d6:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d8:	2f ef       	ldi	r18, 0xFF	; 255
     2da:	8f e5       	ldi	r24, 0x5F	; 95
     2dc:	93 e0       	ldi	r25, 0x03	; 3
     2de:	21 50       	subi	r18, 0x01	; 1
     2e0:	80 40       	sbci	r24, 0x00	; 0
     2e2:	90 40       	sbci	r25, 0x00	; 0
     2e4:	e1 f7       	brne	.-8      	; 0x2de <lcd_init+0x1a>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <lcd_init+0x24>
     2e8:	00 00       	nop

    _delay_ms(100);       /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     2ea:	8b b3       	in	r24, 0x1b	; 27
     2ec:	82 60       	ori	r24, 0x02	; 2
     2ee:	8b bb       	out	0x1b, r24	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     2f0:	8b b3       	in	r24, 0x1b	; 27
     2f2:	81 60       	ori	r24, 0x01	; 1
     2f4:	8b bb       	out	0x1b, r24	; 27
    lcd_e_toggle();
     2f6:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	9b e6       	ldi	r25, 0x6B	; 107
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_init+0x3a>
     302:	00 c0       	rjmp	.+0      	; 0x304 <lcd_init+0x40>
     304:	00 00       	nop
    _delay_ms(10); //delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     306:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     30a:	c0 eb       	ldi	r28, 0xB0	; 176
     30c:	d0 e0       	ldi	r29, 0x00	; 0
     30e:	ce 01       	movw	r24, r28
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <lcd_init+0x4c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     314:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     318:	ce 01       	movw	r24, r28
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_init+0x56>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     31e:	8b b3       	in	r24, 0x1b	; 27
     320:	8e 7f       	andi	r24, 0xFE	; 254
     322:	8b bb       	out	0x1b, r24	; 27
    lcd_e_toggle();
     324:	0e 94 af 00 	call	0x15e	; 0x15e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     328:	21 97       	sbiw	r28, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <lcd_init+0x64>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     32c:	88 e2       	ldi	r24, 0x28	; 40
     32e:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     332:	88 e0       	ldi	r24, 0x08	; 8
     334:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     338:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     33c:	86 e0       	ldi	r24, 0x06	; 6
     33e:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     342:	81 2f       	mov	r24, r17
     344:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_command>

     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	08 95       	ret

00000350 <RTC_Clock_Write>:
	I2C_Write(_day);					// Zapisi na lokaciju 03 koja prima vrijednost dana, redni broj dana u tjednu
	I2C_Write(_date);					// Zapisi na lokaciju 04 koja prima vrijednost datuma/dan
	I2C_Write(_month);					// Zapisi na lokaciju 05 koja prima vrijednost datuma/mjesec
	I2C_Write(_year);					// Zapisi na lokaciju 06 koja prima vrijednost datum/godina
	I2C_Stop();							// Zaustavi I2C komunikaciju
}
     350:	1f 93       	push	r17
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	d6 2f       	mov	r29, r22
     358:	14 2f       	mov	r17, r20
     35a:	c8 2f       	mov	r28, r24
     35c:	c2 2b       	or	r28, r18
     35e:	80 ed       	ldi	r24, 0xD0	; 208
     360:	0e 94 4d 00 	call	0x9a	; 0x9a <I2C_Start>
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_Write>
     36a:	81 2f       	mov	r24, r17
     36c:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_Write>
     370:	8d 2f       	mov	r24, r29
     372:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_Write>
     376:	8c 2f       	mov	r24, r28
     378:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_Write>
     37c:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Stop>
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	08 95       	ret

00000388 <rtc_get_temp>:

void rtc_get_temp()									// funkcija za dohvacanje temperature od ds3231
{
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
	uint8_t MSB;
	uint8_t LSB;
	I2C_Start(Device_Write_address);			// Zapocni I2C komunikaciju sa RTC 
     38c:	80 ed       	ldi	r24, 0xD0	; 208
     38e:	0e 94 4d 00 	call	0x9a	; 0x9a <I2C_Start>
	I2C_Write(Temperature_address);				// Zapisi koja ce se adrese citati
     392:	81 e1       	ldi	r24, 0x11	; 17
     394:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);	// Ponovo pokreni komunikaciju, i predaj adresu s koje se cita vrijednost
     398:	81 ed       	ldi	r24, 0xD1	; 209
     39a:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Repeated_Start>
	MSB = I2C_Read_Ack();						// Procitaj podatke
     39e:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Read_Ack>
     3a2:	ec 01       	movw	r28, r24
	LSB = I2C_Read_Nack();
     3a4:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Read_Nack>
	n1=MSB;
     3a8:	dd 27       	eor	r29, r29
     3aa:	d0 93 ed 02 	sts	0x02ED, r29	; 0x8002ed <n1+0x1>
     3ae:	c0 93 ec 02 	sts	0x02EC, r28	; 0x8002ec <n1>
	n2=((LSB >> 6) * 0.25 );					//u 0x12 je decimalni dio temperature u bit7 i bit8 (po 0.25)
     3b2:	82 95       	swap	r24
     3b4:	86 95       	lsr	r24
     3b6:	86 95       	lsr	r24
     3b8:	83 70       	andi	r24, 0x03	; 3
     3ba:	68 2f       	mov	r22, r24
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__floatsisf>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	40 e8       	ldi	r20, 0x80	; 128
     3cc:	5e e3       	ldi	r21, 0x3E	; 62
     3ce:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__mulsf3>
     3d2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fixsfsi>
     3d6:	70 93 4e 02 	sts	0x024E, r23	; 0x80024e <n2+0x1>
     3da:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <n2>
	I2C_Stop();									// Zaustavi I2C komunikaciju
     3de:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Stop>
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <RTC_Read_Clock>:

void RTC_Read_Clock(char read_clock_address)		// funkcija za dohvacanje vremena sa DS3231
{
     3e8:	cf 93       	push	r28
     3ea:	c8 2f       	mov	r28, r24
	I2C_Start(Device_Write_address);			// Zapocni I2C komunikaciju sa RTC 
     3ec:	80 ed       	ldi	r24, 0xD0	; 208
     3ee:	0e 94 4d 00 	call	0x9a	; 0x9a <I2C_Start>
	I2C_Write(read_clock_address);				// Zapisi koja ce se adrese citati
     3f2:	8c 2f       	mov	r24, r28
     3f4:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);	// Ponovo pokreni komunikaciju, i predaj adresu s koje se cita vrijednost
     3f8:	81 ed       	ldi	r24, 0xD1	; 209
     3fa:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Repeated_Start>

	second = I2C_Read_Ack();					// Procitaj sekunde
     3fe:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Read_Ack>
     402:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <second+0x1>
     406:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <second>
	minute = I2C_Read_Ack();					// Procitaj minute
     40a:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Read_Ack>
     40e:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <minute+0x1>
     412:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <minute>
	hour = I2C_Read_Nack();						// Procitaj sat
     416:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Read_Nack>
     41a:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <hour+0x1>
     41e:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <hour>
	I2C_Stop();									// Zaustavi I2C komunikaciju
     422:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Stop>
}
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <RTC_Read_Calendar>:

void RTC_Read_Calendar(char read_calendar_address)  // funkcija za dohvacanje datuma sa DS3231
{
     42a:	cf 93       	push	r28
     42c:	c8 2f       	mov	r28, r24
	I2C_Start(Device_Write_address);			// Zapocni I2C komunikaciju sa RTC 
     42e:	80 ed       	ldi	r24, 0xD0	; 208
     430:	0e 94 4d 00 	call	0x9a	; 0x9a <I2C_Start>
	I2C_Write(read_calendar_address);			// Zapisi koja ce se adrese citati
     434:	8c 2f       	mov	r24, r28
     436:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);	// Ponovo pokreni komunikaciju, i predaj adresu s koje se cita vrijednost
     43a:	81 ed       	ldi	r24, 0xD1	; 209
     43c:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Repeated_Start>

	day = I2C_Read_Ack();						//Procitaj redni broj dana u tjednu
     440:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Read_Ack>
     444:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <day+0x1>
     448:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <day>
	date = I2C_Read_Ack();						//Procitaj datum/dan
     44c:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Read_Ack>
     450:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <date+0x1>
     454:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <date>
	month = I2C_Read_Ack();						//Procitaj datum/mjesec
     458:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Read_Ack>
     45c:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <month+0x1>
     460:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <month>
	year = I2C_Read_Nack();						//Procitaj datum/godinu
     464:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_Read_Nack>
     468:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <year+0x1>
     46c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <year>
	I2C_Stop();									// Zaustavi I2C komunikaciju
     470:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Stop>
}
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <button_state>:
	Funkcija prima int vrijednost tipke koju promatramo i vraca
	1 ako je tipka stisnuta, tj 0 ako nije */

unsigned char button_state(int button)			
{												
	if (!(PINB & (1<<button)))
     478:	26 b3       	in	r18, 0x16	; 22
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	08 2e       	mov	r0, r24
     47e:	02 c0       	rjmp	.+4      	; 0x484 <button_state+0xc>
     480:	35 95       	asr	r19
     482:	27 95       	ror	r18
     484:	0a 94       	dec	r0
     486:	e2 f7       	brpl	.-8      	; 0x480 <button_state+0x8>
     488:	20 fd       	sbrc	r18, 0
     48a:	15 c0       	rjmp	.+42     	; 0x4b6 <button_state+0x3e>
     48c:	22 e3       	ldi	r18, 0x32	; 50
     48e:	33 e0       	ldi	r19, 0x03	; 3
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	21 50       	subi	r18, 0x01	; 1
     494:	30 40       	sbci	r19, 0x00	; 0
     496:	40 40       	sbci	r20, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <button_state+0x1a>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <button_state+0x24>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <button_state+0x26>
	{
		_delay_ms(30);
		if (!(PINB & (1<<button)))
     49e:	26 b3       	in	r18, 0x16	; 22
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	a9 01       	movw	r20, r18
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <button_state+0x32>
     4a6:	55 95       	asr	r21
     4a8:	47 95       	ror	r20
     4aa:	8a 95       	dec	r24
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <button_state+0x2e>
     4ae:	40 fd       	sbrc	r20, 0
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <button_state+0x42>
			return 1;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	08 95       	ret
	}
	return 0;
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	08 95       	ret
     4ba:	80 e0       	ldi	r24, 0x00	; 0
}
     4bc:	08 95       	ret

000004be <BCDToDecimal>:
	prebacuje u decimali oblik i BCD
	te tu decimalnu vrijednost vraca */

int BCDToDecimal(int BCD)							// funkcija koja pretvara iz BCD u decimalni oblik
{
	return (((BCD>>4)*10) + (BCD & 0xF));
     4be:	9c 01       	movw	r18, r24
     4c0:	35 95       	asr	r19
     4c2:	27 95       	ror	r18
     4c4:	35 95       	asr	r19
     4c6:	27 95       	ror	r18
     4c8:	35 95       	asr	r19
     4ca:	27 95       	ror	r18
     4cc:	35 95       	asr	r19
     4ce:	27 95       	ror	r18
     4d0:	a9 01       	movw	r20, r18
     4d2:	44 0f       	add	r20, r20
     4d4:	55 1f       	adc	r21, r21
     4d6:	22 0f       	add	r18, r18
     4d8:	33 1f       	adc	r19, r19
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	24 0f       	add	r18, r20
     4e4:	35 1f       	adc	r19, r21
     4e6:	8f 70       	andi	r24, 0x0F	; 15
     4e8:	99 27       	eor	r25, r25
}
     4ea:	82 0f       	add	r24, r18
     4ec:	93 1f       	adc	r25, r19
     4ee:	08 95       	ret

000004f0 <screen0>:

/*	Funkcija koja ispisuje sve podatke na pocetnom ekranu (ekran 0)
	Funckija neprima nikakve podatke i nevraca nikakav podatak */

void screen0(void)									
{
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	64 97       	sbiw	r28, 0x14	; 20
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
	char ds3231_buffer[20];					
	snprintf(ds3231_buffer,20, "%02x:%02x", hour, minute); //zapisemo u buffer sta zelimo ispisati (x Unsigned hexadecimal integer)
     50a:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <minute+0x1>
     50e:	8f 93       	push	r24
     510:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <minute>
     514:	8f 93       	push	r24
     516:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <hour+0x1>
     51a:	8f 93       	push	r24
     51c:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <hour>
     520:	8f 93       	push	r24
     522:	87 e6       	ldi	r24, 0x67	; 103
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	9f 93       	push	r25
     528:	8f 93       	push	r24
     52a:	1f 92       	push	r1
     52c:	0f 2e       	mov	r0, r31
     52e:	f4 e1       	ldi	r31, 0x14	; 20
     530:	ff 2e       	mov	r15, r31
     532:	f0 2d       	mov	r31, r0
     534:	ff 92       	push	r15
     536:	8e 01       	movw	r16, r28
     538:	0f 5f       	subi	r16, 0xFF	; 255
     53a:	1f 4f       	sbci	r17, 0xFF	; 255
     53c:	1f 93       	push	r17
     53e:	0f 93       	push	r16
     540:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <snprintf>
	lcd_gotoxy(5,0);									// odredujemo poziciju gdje zelimo pisati po ekranu
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	85 e0       	ldi	r24, 0x05	; 5
     548:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts(ds3231_buffer);							// postavljamo na ekran informacije iz buffera
     54c:	c8 01       	movw	r24, r16
     54e:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	
	rtc_get_temp();
     552:	0e 94 c4 01 	call	0x388	; 0x388 <rtc_get_temp>
	snprintf(ds3231_buffer,20,"%d.%d C", n1,n2);
     556:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <n2+0x1>
     55a:	8f 93       	push	r24
     55c:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <n2>
     560:	8f 93       	push	r24
     562:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <n1+0x1>
     566:	8f 93       	push	r24
     568:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <n1>
     56c:	8f 93       	push	r24
     56e:	81 e7       	ldi	r24, 0x71	; 113
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	1f 92       	push	r1
     578:	ff 92       	push	r15
     57a:	1f 93       	push	r17
     57c:	0f 93       	push	r16
     57e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <snprintf>
	lcd_gotoxy(10,1);
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	8a e0       	ldi	r24, 0x0A	; 10
     586:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts(ds3231_buffer);
     58a:	c8 01       	movw	r24, r16
     58c:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	
	RTC_Read_Calendar(3);						
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	0e 94 15 02 	call	0x42a	; 0x42a <RTC_Read_Calendar>
	snprintf(ds3231_buffer,20, "%02x/%02x/%02x ", date, month, year);
     596:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <year+0x1>
     59a:	8f 93       	push	r24
     59c:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <year>
     5a0:	8f 93       	push	r24
     5a2:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <month+0x1>
     5a6:	8f 93       	push	r24
     5a8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <month>
     5ac:	8f 93       	push	r24
     5ae:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <date+0x1>
     5b2:	8f 93       	push	r24
     5b4:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <date>
     5b8:	8f 93       	push	r24
     5ba:	89 e7       	ldi	r24, 0x79	; 121
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	1f 92       	push	r1
     5c4:	ff 92       	push	r15
     5c6:	1f 93       	push	r17
     5c8:	0f 93       	push	r16
     5ca:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <snprintf>
	lcd_gotoxy(0,1);
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts(ds3231_buffer);
     5e0:	c8 01       	movw	r24, r16
     5e2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>


}
     5e6:	64 96       	adiw	r28, 0x14	; 20
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	08 95       	ret

000005fe <screen01>:
	kada udjemo u mod za prepravljanje podataka
	Funckija prima podatke sati i min koje su tipa int
	i nevraca nikakav podatak */

void screen01(int sati, int min)									
{
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	64 97       	sbiw	r28, 0x14	; 20
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
	char ds3231_buffer[20];
	snprintf(ds3231_buffer,20, "%02d:%02d", sati, min); //zapisemo u buffer sta zelimo ispisati (x Unsigned hexadecimal integer)
     618:	7f 93       	push	r23
     61a:	6f 93       	push	r22
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	89 e8       	ldi	r24, 0x89	; 137
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	9f 93       	push	r25
     626:	8f 93       	push	r24
     628:	1f 92       	push	r1
     62a:	0f 2e       	mov	r0, r31
     62c:	f4 e1       	ldi	r31, 0x14	; 20
     62e:	ff 2e       	mov	r15, r31
     630:	f0 2d       	mov	r31, r0
     632:	ff 92       	push	r15
     634:	8e 01       	movw	r16, r28
     636:	0f 5f       	subi	r16, 0xFF	; 255
     638:	1f 4f       	sbci	r17, 0xFF	; 255
     63a:	1f 93       	push	r17
     63c:	0f 93       	push	r16
     63e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <snprintf>
	lcd_gotoxy(5,0);								// odredujemo poziciju gdje zelimo pisati po ekranu
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	85 e0       	ldi	r24, 0x05	; 5
     646:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts(ds3231_buffer);						// postavljamo na ekran informacije iz buffera
     64a:	c8 01       	movw	r24, r16
     64c:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	
	rtc_get_temp();
     650:	0e 94 c4 01 	call	0x388	; 0x388 <rtc_get_temp>
	snprintf(ds3231_buffer,20,"%d.%d C", n1,n2);
     654:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <n2+0x1>
     658:	8f 93       	push	r24
     65a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <n2>
     65e:	8f 93       	push	r24
     660:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <n1+0x1>
     664:	8f 93       	push	r24
     666:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <n1>
     66a:	8f 93       	push	r24
     66c:	81 e7       	ldi	r24, 0x71	; 113
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	1f 92       	push	r1
     676:	ff 92       	push	r15
     678:	1f 93       	push	r17
     67a:	0f 93       	push	r16
     67c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <snprintf>
	lcd_gotoxy(10,1);
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	8a e0       	ldi	r24, 0x0A	; 10
     684:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts(ds3231_buffer);
     688:	c8 01       	movw	r24, r16
     68a:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	
	RTC_Read_Calendar(3);						
     68e:	83 e0       	ldi	r24, 0x03	; 3
     690:	0e 94 15 02 	call	0x42a	; 0x42a <RTC_Read_Calendar>
	snprintf(ds3231_buffer,20, "%02x/%02x/%02x ", date, month, year);
     694:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <year+0x1>
     698:	8f 93       	push	r24
     69a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <year>
     69e:	8f 93       	push	r24
     6a0:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <month+0x1>
     6a4:	8f 93       	push	r24
     6a6:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <month>
     6aa:	8f 93       	push	r24
     6ac:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <date+0x1>
     6b0:	8f 93       	push	r24
     6b2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <date>
     6b6:	8f 93       	push	r24
     6b8:	89 e7       	ldi	r24, 0x79	; 121
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	9f 93       	push	r25
     6be:	8f 93       	push	r24
     6c0:	1f 92       	push	r1
     6c2:	ff 92       	push	r15
     6c4:	1f 93       	push	r17
     6c6:	0f 93       	push	r16
     6c8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <snprintf>
	lcd_gotoxy(0,1);
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts(ds3231_buffer);
     6de:	c8 01       	movw	r24, r16
     6e0:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>


}
     6e4:	64 96       	adiw	r28, 0x14	; 20
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	08 95       	ret

000006fc <screen1>:

/*	Funkcija koja ispisuje sve podatke na prvom ekranu (ekran 1)
	Funckija neprima nikakve podatke i nevraca nikakav podatak*/

void screen1(void)									
{	
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	64 97       	sbiw	r28, 0x14	; 20
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
	char buffer1[20];
	lcd_gotoxy(0,0);
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts("Rasvjeta");
     724:	83 e9       	ldi	r24, 0x93	; 147
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	lcd_gotoxy(0,1);
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>

	lcd_gotoxy(1,1);
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	sprintf(buffer1,"%02d", hourONtime);
     73c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <hourONtime>
     740:	1f 92       	push	r1
     742:	8f 93       	push	r24
     744:	0f 2e       	mov	r0, r31
     746:	fe e8       	ldi	r31, 0x8E	; 142
     748:	cf 2e       	mov	r12, r31
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	df 2e       	mov	r13, r31
     74e:	f0 2d       	mov	r31, r0
     750:	df 92       	push	r13
     752:	cf 92       	push	r12
     754:	8e 01       	movw	r16, r28
     756:	0f 5f       	subi	r16, 0xFF	; 255
     758:	1f 4f       	sbci	r17, 0xFF	; 255
     75a:	1f 93       	push	r17
     75c:	0f 93       	push	r16
     75e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	lcd_puts(buffer1);
     762:	c8 01       	movw	r24, r16
     764:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>

	lcd_gotoxy(3,1);
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	sprintf(buffer1,":%02d", minuteONtime);
     770:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <minuteONtime>
     774:	1f 92       	push	r1
     776:	8f 93       	push	r24
     778:	0f 2e       	mov	r0, r31
     77a:	fd e8       	ldi	r31, 0x8D	; 141
     77c:	ef 2e       	mov	r14, r31
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	ff 2e       	mov	r15, r31
     782:	f0 2d       	mov	r31, r0
     784:	ff 92       	push	r15
     786:	ef 92       	push	r14
     788:	1f 93       	push	r17
     78a:	0f 93       	push	r16
     78c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	lcd_puts(buffer1);
     790:	c8 01       	movw	r24, r16
     792:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>

	lcd_gotoxy(7,1);
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	87 e0       	ldi	r24, 0x07	; 7
     79a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts("do");
     79e:	8c e9       	ldi	r24, 0x9C	; 156
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>

	lcd_gotoxy(10,1);
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	8a e0       	ldi	r24, 0x0A	; 10
     7aa:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	sprintf(buffer1,"%02d", hourOFFtime);
     7ae:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <hourOFFtime>
     7b2:	1f 92       	push	r1
     7b4:	8f 93       	push	r24
     7b6:	df 92       	push	r13
     7b8:	cf 92       	push	r12
     7ba:	1f 93       	push	r17
     7bc:	0f 93       	push	r16
     7be:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	lcd_puts(buffer1);
     7c2:	c8 01       	movw	r24, r16
     7c4:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>

	lcd_gotoxy(12,1);
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	8c e0       	ldi	r24, 0x0C	; 12
     7cc:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	sprintf(buffer1,":%02d", minuteOFFtime);
     7d0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <minuteOFFtime>
     7d4:	1f 92       	push	r1
     7d6:	8f 93       	push	r24
     7d8:	ff 92       	push	r15
     7da:	ef 92       	push	r14
     7dc:	1f 93       	push	r17
     7de:	0f 93       	push	r16
     7e0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	lcd_puts(buffer1);
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>


}
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	64 96       	adiw	r28, 0x14	; 20
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	08 95       	ret

00000812 <screen2>:

/*	Funkcija koja ispisuje sve podatke na prvom ekranu (ekran 1)
	Funckija neprima nikakve podatke i nevraca nikakav podatak*/

void screen2(void)									
{	
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	64 97       	sbiw	r28, 0x14	; 20
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
	char buffer1[20];
	lcd_gotoxy(0,0);
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts("Vrata:");
     832:	8f e9       	ldi	r24, 0x9F	; 159
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	lcd_gotoxy(8,0);
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	88 e0       	ldi	r24, 0x08	; 8
     83e:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	sprintf(buffer1,"%02dmin", gateInterval);
     842:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     846:	1f 92       	push	r1
     848:	8f 93       	push	r24
     84a:	86 ea       	ldi	r24, 0xA6	; 166
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	8e 01       	movw	r16, r28
     854:	0f 5f       	subi	r16, 0xFF	; 255
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	1f 93       	push	r17
     85a:	0f 93       	push	r16
     85c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	lcd_puts(buffer1);
     860:	c8 01       	movw	r24, r16
     862:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	lcd_gotoxy(0,1);
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	lcd_puts("Do:");
     86e:	8e ea       	ldi	r24, 0xAE	; 174
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	lcd_gotoxy(5,1);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	85 e0       	ldi	r24, 0x05	; 5
     87a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
	sprintf(buffer1,"%02d:%02d", gateOFFtimeH,gateOFFtimeM);
     87e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gateOFFtimeM>
     882:	1f 92       	push	r1
     884:	8f 93       	push	r24
     886:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gateOFFtimeH>
     88a:	1f 92       	push	r1
     88c:	8f 93       	push	r24
     88e:	89 e8       	ldi	r24, 0x89	; 137
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	9f 93       	push	r25
     894:	8f 93       	push	r24
     896:	1f 93       	push	r17
     898:	0f 93       	push	r16
     89a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	lcd_puts(buffer1);
     89e:	c8 01       	movw	r24, r16
     8a0:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
}
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	64 96       	adiw	r28, 0x14	; 20
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	08 95       	ret

000008c4 <turnON>:
/*	Funkcija koja pali svijetla (PORT D i C)
	Funkcija neprima nikakav podatak i nevraca nikakav podatak */

void turnON(void)									
{
	for (uint8_t i = 2; i < 8; i++)
     8c4:	22 e0       	ldi	r18, 0x02	; 2
     8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <turnON+0x1e>
	{
		PORTD &=~(1<<i);
     8c8:	32 b3       	in	r19, 0x12	; 18
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	02 2e       	mov	r0, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <turnON+0x12>
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	0a 94       	dec	r0
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <turnON+0xe>
     8da:	80 95       	com	r24
     8dc:	83 23       	and	r24, r19
     8de:	82 bb       	out	0x12, r24	; 18
/*	Funkcija koja pali svijetla (PORT D i C)
	Funkcija neprima nikakav podatak i nevraca nikakav podatak */

void turnON(void)									
{
	for (uint8_t i = 2; i < 8; i++)
     8e0:	2f 5f       	subi	r18, 0xFF	; 255
     8e2:	28 30       	cpi	r18, 0x08	; 8
     8e4:	88 f3       	brcs	.-30     	; 0x8c8 <turnON+0x4>
     8e6:	26 e0       	ldi	r18, 0x06	; 6
     8e8:	0d c0       	rjmp	.+26     	; 0x904 <turnON+0x40>
	{
		PORTD &=~(1<<i);
	}
	for (uint8_t j = 6; j < 8; j++)
	{
		PORTC &=~(1<<j);
     8ea:	35 b3       	in	r19, 0x15	; 21
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	02 2e       	mov	r0, r18
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <turnON+0x34>
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	0a 94       	dec	r0
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <turnON+0x30>
     8fc:	80 95       	com	r24
     8fe:	83 23       	and	r24, r19
     900:	85 bb       	out	0x15, r24	; 21
{
	for (uint8_t i = 2; i < 8; i++)
	{
		PORTD &=~(1<<i);
	}
	for (uint8_t j = 6; j < 8; j++)
     902:	2f 5f       	subi	r18, 0xFF	; 255
     904:	28 30       	cpi	r18, 0x08	; 8
     906:	88 f3       	brcs	.-30     	; 0x8ea <turnON+0x26>
	{
		PORTC &=~(1<<j);
	}
}
     908:	08 95       	ret

0000090a <turnOFF>:
/*	Funkcija koja gasi svijetla (PORT D i C)
	Funkcija neprima nikakav podatak i nevraca nikakav podatak */

void turnOFF(void)									
{
	for (uint8_t i = 7; i >=2 ; i--)
     90a:	27 e0       	ldi	r18, 0x07	; 7
     90c:	0c c0       	rjmp	.+24     	; 0x926 <turnOFF+0x1c>
	{
		PORTD |=(1<<i);
     90e:	32 b3       	in	r19, 0x12	; 18
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	02 2e       	mov	r0, r18
     916:	02 c0       	rjmp	.+4      	; 0x91c <turnOFF+0x12>
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	0a 94       	dec	r0
     91e:	e2 f7       	brpl	.-8      	; 0x918 <turnOFF+0xe>
     920:	83 2b       	or	r24, r19
     922:	82 bb       	out	0x12, r24	; 18
/*	Funkcija koja gasi svijetla (PORT D i C)
	Funkcija neprima nikakav podatak i nevraca nikakav podatak */

void turnOFF(void)									
{
	for (uint8_t i = 7; i >=2 ; i--)
     924:	21 50       	subi	r18, 0x01	; 1
     926:	22 30       	cpi	r18, 0x02	; 2
     928:	90 f7       	brcc	.-28     	; 0x90e <turnOFF+0x4>
     92a:	27 e0       	ldi	r18, 0x07	; 7
     92c:	0c c0       	rjmp	.+24     	; 0x946 <turnOFF+0x3c>
	{
		PORTD |=(1<<i);
	}
	for (uint8_t j = 7; j >=6 ; j--)
	{
		PORTC |=(1<<j);
     92e:	35 b3       	in	r19, 0x15	; 21
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	02 2e       	mov	r0, r18
     936:	02 c0       	rjmp	.+4      	; 0x93c <turnOFF+0x32>
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	0a 94       	dec	r0
     93e:	e2 f7       	brpl	.-8      	; 0x938 <turnOFF+0x2e>
     940:	83 2b       	or	r24, r19
     942:	85 bb       	out	0x15, r24	; 21
{
	for (uint8_t i = 7; i >=2 ; i--)
	{
		PORTD |=(1<<i);
	}
	for (uint8_t j = 7; j >=6 ; j--)
     944:	21 50       	subi	r18, 0x01	; 1
     946:	26 30       	cpi	r18, 0x06	; 6
     948:	90 f7       	brcc	.-28     	; 0x92e <turnOFF+0x24>
	{
		PORTC |=(1<<j);
	}
}
     94a:	08 95       	ret

0000094c <intervalH>:
	u intervalu 0 do 24
	Funkcija prima podatak tipa int i vraca podatak tipa int */

int intervalH (int val)								
{							
	if ( val > 24)
     94c:	89 31       	cpi	r24, 0x19	; 25
     94e:	91 05       	cpc	r25, r1
     950:	14 f0       	brlt	.+4      	; 0x956 <intervalH+0xa>
	{
		val = 1;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
	}
	if (val < 0)
     956:	99 23       	and	r25, r25
     958:	14 f4       	brge	.+4      	; 0x95e <intervalH+0x12>
	{
		val = 24;
     95a:	88 e1       	ldi	r24, 0x18	; 24
     95c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return val;
}
     95e:	08 95       	ret

00000960 <intervalM>:
	u intervalu 0 do 59
	Funkcija prima podatak tipa int i vraca podatak tipa int */

int intervalM (int val)	
{						
	if ( val > 59)
     960:	8c 33       	cpi	r24, 0x3C	; 60
     962:	91 05       	cpc	r25, r1
     964:	14 f0       	brlt	.+4      	; 0x96a <intervalM+0xa>
	{
		val = 0;
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
	}
	if (val < 0)
     96a:	99 23       	and	r25, r25
     96c:	14 f4       	brge	.+4      	; 0x972 <intervalM+0x12>
	{
		val = 59;
     96e:	8b e3       	ldi	r24, 0x3B	; 59
     970:	90 e0       	ldi	r25, 0x00	; 0
	}
	return val;
}
     972:	08 95       	ret

00000974 <gateTimer>:
/*	Funkcija koja prati dali je proslo odredjeno
	 vrijeme ovisno o varijabli gateIntervalu 
	Funkcija neprima nikakav podatak i nevraca nikakav podatak */

void gateTimer(void)								
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
	RTC_Read_Clock(0);
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <RTC_Read_Clock>
	int currentTime = BCDToDecimal(minute);
     97e:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <minute>
     982:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <minute+0x1>
     986:	0e 94 5f 02 	call	0x4be	; 0x4be <BCDToDecimal>
     98a:	ec 01       	movw	r28, r24
	int currentTimeSec = BCDToDecimal(second);
     98c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <second>
     990:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <second+0x1>
     994:	0e 94 5f 02 	call	0x4be	; 0x4be <BCDToDecimal>
	if ( currentTime < pressedEvent)
     998:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pressedEvent>
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	c2 17       	cp	r28, r18
     9a0:	d3 07       	cpc	r29, r19
     9a2:	14 f4       	brge	.+4      	; 0x9a8 <gateTimer+0x34>
	{
		currentTime = currentTime + pressedEvent;
     9a4:	c2 0f       	add	r28, r18
     9a6:	d3 1f       	adc	r29, r19
	}
	if (currentTime-pressedEvent >= gateInterval)
     9a8:	c2 1b       	sub	r28, r18
     9aa:	d3 0b       	sbc	r29, r19
     9ac:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	c2 17       	cp	r28, r18
     9b4:	d3 07       	cpc	r29, r19
     9b6:	44 f0       	brlt	.+16     	; 0x9c8 <gateTimer+0x54>
	{
		if (currentTimeSec >= pressedEventSec)
     9b8:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <pressedEventSec>
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	82 17       	cp	r24, r18
     9c0:	93 07       	cpc	r25, r19
     9c2:	14 f0       	brlt	.+4      	; 0x9c8 <gateTimer+0x54>
		{
			gateFlag = false;
     9c4:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <gateFlag>
		}
	}
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <gateEvent>:
	ako su otvorena zapamti vrijeme i postavi zastavicu 
	Funkcija neprima nikakav podatak i nevraca nikakav podatak */

void gateEvent(void)								
{
	if(button_state(gate))
     9ce:	86 e0       	ldi	r24, 0x06	; 6
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
     9d6:	88 23       	and	r24, r24
     9d8:	59 f0       	breq	.+22     	; 0x9f0 <gateEvent+0x22>
	{
		pressedEvent = pmin;
     9da:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pmin>
     9de:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pressedEvent>
		pressedEventSec = psec;
     9e2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
     9e6:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <pressedEventSec>
		gateFlag = true;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <gateFlag>
     9f0:	08 95       	ret

000009f2 <esp_site>:
/*	Funkcija koja salje s atmega16 na esp8266 preko uarta
	AT komandu za spajanje na stranicu
	Funkcija neprima nikakav podatak i nevraca nikakav podatak */

void esp_site(void)
{
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	ec 97       	sbiw	r28, 0x3c	; 60
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[60];
	sprintf(_atCommand, "AT+CIPSTART=\"TCP\",\"%s\",%s", DOMAIN, PORT);
     a0a:	82 eb       	ldi	r24, 0xB2	; 178
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	85 eb       	ldi	r24, 0xB5	; 181
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	88 ec       	ldi	r24, 0xC8	; 200
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	8e 01       	movw	r16, r28
     a24:	0f 5f       	subi	r16, 0xFF	; 255
     a26:	1f 4f       	sbci	r17, 0xFF	; 255
     a28:	1f 93       	push	r17
     a2a:	0f 93       	push	r16
     a2c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	USART_SendString(_atCommand);
     a30:	c8 01       	movw	r24, r16
     a32:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
	USART_SendString("\r\n");
     a36:	8e e2       	ldi	r24, 0x2E	; 46
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
     a3e:	2f ef       	ldi	r18, 0xFF	; 255
     a40:	8f e9       	ldi	r24, 0x9F	; 159
     a42:	92 e3       	ldi	r25, 0x32	; 50
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	80 40       	sbci	r24, 0x00	; 0
     a48:	90 40       	sbci	r25, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <esp_site+0x52>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <esp_site+0x5c>
     a4e:	00 00       	nop
	_delay_ms(1500);
}
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	ec 96       	adiw	r28, 0x3c	; 60
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <esp_publish>:
	data1 - podatak 1 koji se upisuje u polje
	data2 - podatak 2 koji se upisuje u polje 
	Funkcija nevraca nikakav podatak */

void esp_publish(uint8_t field, uint8_t d_num, uint8_t data1, uint8_t data2)
{
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	c2 5d       	subi	r28, 0xD2	; 210
     a82:	d1 09       	sbc	r29, r1
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[60];
	char get_buffer[150];
	if (d_num == 1)
     a8e:	61 30       	cpi	r22, 0x01	; 1
     a90:	c1 f4       	brne	.+48     	; 0xac2 <esp_publish+0x52>
	{
		sprintf(get_buffer, "GET https://api.thingspeak.com/update?api_key=%s&field%d=%d",API_WRITE_KEY,field,data1);
     a92:	1f 92       	push	r1
     a94:	4f 93       	push	r20
     a96:	1f 92       	push	r1
     a98:	8f 93       	push	r24
     a9a:	82 ee       	ldi	r24, 0xE2	; 226
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	83 ef       	ldi	r24, 0xF3	; 243
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	9f 93       	push	r25
     aa8:	8f 93       	push	r24
     aaa:	ce 01       	movw	r24, r28
     aac:	cd 96       	adiw	r24, 0x3d	; 61
     aae:	9f 93       	push	r25
     ab0:	8f 93       	push	r24
     ab2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	1b c0       	rjmp	.+54     	; 0xaf8 <esp_publish+0x88>
	} 
	else if (d_num ==2)
     ac2:	62 30       	cpi	r22, 0x02	; 2
     ac4:	c9 f4       	brne	.+50     	; 0xaf8 <esp_publish+0x88>
	{
		sprintf(get_buffer, "GET https://api.thingspeak.com/update?api_key=%s&field%d=%d%d",API_WRITE_KEY,field,data1,data2);
     ac6:	1f 92       	push	r1
     ac8:	2f 93       	push	r18
     aca:	1f 92       	push	r1
     acc:	4f 93       	push	r20
     ace:	1f 92       	push	r1
     ad0:	8f 93       	push	r24
     ad2:	82 ee       	ldi	r24, 0xE2	; 226
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	8f e2       	ldi	r24, 0x2F	; 47
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	9f 93       	push	r25
     ae0:	8f 93       	push	r24
     ae2:	ce 01       	movw	r24, r28
     ae4:	cd 96       	adiw	r24, 0x3d	; 61
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
	}
	
	sprintf(_atCommand, "AT+CIPSEND=%d", (strlen(get_buffer)+2));
     af8:	8e 01       	movw	r16, r28
     afa:	03 5c       	subi	r16, 0xC3	; 195
     afc:	1f 4f       	sbci	r17, 0xFF	; 255
     afe:	f8 01       	movw	r30, r16
     b00:	01 90       	ld	r0, Z+
     b02:	00 20       	and	r0, r0
     b04:	e9 f7       	brne	.-6      	; 0xb00 <esp_publish+0x90>
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	e0 1b       	sub	r30, r16
     b0a:	f1 0b       	sbc	r31, r17
     b0c:	32 96       	adiw	r30, 0x02	; 2
     b0e:	ff 93       	push	r31
     b10:	ef 93       	push	r30
     b12:	8d e6       	ldi	r24, 0x6D	; 109
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	9f 93       	push	r25
     b18:	8f 93       	push	r24
     b1a:	ce 01       	movw	r24, r28
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	7c 01       	movw	r14, r24
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	USART_SendString(_atCommand);
     b28:	c7 01       	movw	r24, r14
     b2a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
	USART_SendString("\r\n");
     b2e:	8e e2       	ldi	r24, 0x2E	; 46
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	2f e9       	ldi	r18, 0x9F	; 159
     b3a:	82 e3       	ldi	r24, 0x32	; 50
     b3c:	91 50       	subi	r25, 0x01	; 1
     b3e:	20 40       	sbci	r18, 0x00	; 0
     b40:	80 40       	sbci	r24, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <esp_publish+0xcc>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <esp_publish+0xd6>
     b46:	00 00       	nop
	_delay_ms(1500);
	USART_SendString(get_buffer);
     b48:	c8 01       	movw	r24, r16
     b4a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
	USART_SendString("\r\n");
     b4e:	8e e2       	ldi	r24, 0x2E	; 46
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
     b56:	9f ef       	ldi	r25, 0xFF	; 255
     b58:	2f e9       	ldi	r18, 0x9F	; 159
     b5a:	82 e3       	ldi	r24, 0x32	; 50
     b5c:	91 50       	subi	r25, 0x01	; 1
     b5e:	20 40       	sbci	r18, 0x00	; 0
     b60:	80 40       	sbci	r24, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <esp_publish+0xec>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <esp_publish+0xf6>
     b66:	00 00       	nop
	_delay_ms(1500);	
}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	ce 52       	subi	r28, 0x2E	; 46
     b76:	df 4f       	sbci	r29, 0xFF	; 255
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	08 95       	ret

00000b90 <esp_local_update>:
	Funkcija prima podatak tipa uint8_t 
	field - koje polje na stranici thingspeak se upisuje podatak
	Funkcija nevraca nikakav podatak */

void esp_local_update(uint8_t field)
{
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	c2 5d       	subi	r28, 0xD2	; 210
     ba2:	d1 09       	sbc	r29, r1
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[60];
	char get_buffer[150];
	sprintf(get_buffer, "GET https://api.thingspeak.com/channels/%s/fields/%d/last.txt",CHANNEL_ID,field);
     bae:	1f 92       	push	r1
     bb0:	8f 93       	push	r24
     bb2:	8b e7       	ldi	r24, 0x7B	; 123
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	9f 93       	push	r25
     bb8:	8f 93       	push	r24
     bba:	83 e8       	ldi	r24, 0x83	; 131
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	9f 93       	push	r25
     bc0:	8f 93       	push	r24
     bc2:	8e 01       	movw	r16, r28
     bc4:	03 5c       	subi	r16, 0xC3	; 195
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
     bc8:	1f 93       	push	r17
     bca:	0f 93       	push	r16
     bcc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	sprintf(_atCommand, "AT+CIPSEND=%d", (strlen(get_buffer)+2));
     bd0:	f8 01       	movw	r30, r16
     bd2:	01 90       	ld	r0, Z+
     bd4:	00 20       	and	r0, r0
     bd6:	e9 f7       	brne	.-6      	; 0xbd2 <esp_local_update+0x42>
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	e0 1b       	sub	r30, r16
     bdc:	f1 0b       	sbc	r31, r17
     bde:	32 96       	adiw	r30, 0x02	; 2
     be0:	ff 93       	push	r31
     be2:	ef 93       	push	r30
     be4:	8d e6       	ldi	r24, 0x6D	; 109
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	9f 93       	push	r25
     bea:	8f 93       	push	r24
     bec:	ce 01       	movw	r24, r28
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	7c 01       	movw	r14, r24
     bf2:	9f 93       	push	r25
     bf4:	8f 93       	push	r24
     bf6:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	
	USART_SendString(_atCommand);
     bfa:	c7 01       	movw	r24, r14
     bfc:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
	USART_SendString("\r\n");
     c00:	8e e2       	ldi	r24, 0x2E	; 46
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
     c08:	9f ef       	ldi	r25, 0xFF	; 255
     c0a:	2f e9       	ldi	r18, 0x9F	; 159
     c0c:	82 e3       	ldi	r24, 0x32	; 50
     c0e:	91 50       	subi	r25, 0x01	; 1
     c10:	20 40       	sbci	r18, 0x00	; 0
     c12:	80 40       	sbci	r24, 0x00	; 0
     c14:	e1 f7       	brne	.-8      	; 0xc0e <esp_local_update+0x7e>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <esp_local_update+0x88>
     c18:	00 00       	nop
	_delay_ms(1500);
	USART_SendString(get_buffer);
     c1a:	c8 01       	movw	r24, r16
     c1c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
	USART_SendString("\r\n");
     c20:	8e e2       	ldi	r24, 0x2E	; 46
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
	
}
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	ce 52       	subi	r28, 0x2E	; 46
     c34:	df 4f       	sbci	r29, 0xFF	; 255
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <uart_korisni_dio>:
	Funkcija prima podatak tipa uint8_t
	field - koje polje na stranici thingspeak se upisuje podatak
	Funkcija nevraca nikakav podatak */

void uart_korisni_dio(uint8_t field)
{
     c4e:	cf 93       	push	r28
     c50:	c8 2f       	mov	r28, r24
	if (strstr(uart_poruka,"CLO")!=NULL)
     c52:	61 ec       	ldi	r22, 0xC1	; 193
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	83 e5       	ldi	r24, 0x53	; 83
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <strstr>
     c5e:	89 2b       	or	r24, r25
     c60:	f1 f1       	breq	.+124    	; 0xcde <uart_korisni_dio+0x90>
	{
		ret = strstr(uart_poruka,"+IPD");	// uzmi adresu gdje pocinje "+IPD" u pristigloj poruci
     c62:	65 ec       	ldi	r22, 0xC5	; 197
     c64:	71 e0       	ldi	r23, 0x01	; 1
     c66:	83 e5       	ldi	r24, 0x53	; 83
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <strstr>
     c6e:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <ret+0x1>
     c72:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <ret>
		int vrijednost=atoi(ret+7);			//korisni podatak se nalazi na +7 adresi od ret +IPD
     c76:	07 96       	adiw	r24, 0x07	; 7
     c78:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <atoi>
		
		//provjeravamo gdje moramo upisati podatak
		if (field==1)
     c7c:	c1 30       	cpi	r28, 0x01	; 1
     c7e:	49 f4       	brne	.+18     	; 0xc92 <uart_korisni_dio+0x44>
		{
			hourONtime=vrijednost/100;
     c80:	64 e6       	ldi	r22, 0x64	; 100
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     c88:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <hourONtime>
			minuteONtime=vrijednost%100;
     c8c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <minuteONtime>
     c90:	1a c0       	rjmp	.+52     	; 0xcc6 <uart_korisni_dio+0x78>
		}
		else if (field==2)
     c92:	c2 30       	cpi	r28, 0x02	; 2
     c94:	49 f4       	brne	.+18     	; 0xca8 <uart_korisni_dio+0x5a>
		{
			hourOFFtime=vrijednost/100;
     c96:	64 e6       	ldi	r22, 0x64	; 100
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     c9e:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <hourOFFtime>
			minuteOFFtime=vrijednost%100;
     ca2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <minuteOFFtime>
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <uart_korisni_dio+0x78>
		}
		else if (field==3)
     ca8:	c3 30       	cpi	r28, 0x03	; 3
     caa:	19 f4       	brne	.+6      	; 0xcb2 <uart_korisni_dio+0x64>
		{
			gateInterval=vrijednost;
     cac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <uart_korisni_dio+0x78>
		}
		else if (field==4)
     cb2:	c4 30       	cpi	r28, 0x04	; 4
     cb4:	41 f4       	brne	.+16     	; 0xcc6 <uart_korisni_dio+0x78>
		{
			gateOFFtimeH=vrijednost/100;
     cb6:	64 e6       	ldi	r22, 0x64	; 100
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     cbe:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <gateOFFtimeH>
			gateOFFtimeM=vrijednost%100;
     cc2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gateOFFtimeM>
		}
		//ocistimo uart_poruka i ret
		memset(uart_poruka,0,150);
     cc6:	86 e9       	ldi	r24, 0x96	; 150
     cc8:	e3 e5       	ldi	r30, 0x53	; 83
     cca:	f2 e0       	ldi	r31, 0x02	; 2
     ccc:	df 01       	movw	r26, r30
     cce:	1d 92       	st	X+, r1
     cd0:	8a 95       	dec	r24
     cd2:	e9 f7       	brne	.-6      	; 0xcce <uart_korisni_dio+0x80>
		ret =0;
     cd4:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <ret+0x1>
     cd8:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <ret>
     cdc:	4f c0       	rjmp	.+158    	; 0xd7c <uart_korisni_dio+0x12e>
	}
	else if (strstr(uart_poruka,"STATUS:")!=NULL)
     cde:	6a ec       	ldi	r22, 0xCA	; 202
     ce0:	71 e0       	ldi	r23, 0x01	; 1
     ce2:	83 e5       	ldi	r24, 0x53	; 83
     ce4:	92 e0       	ldi	r25, 0x02	; 2
     ce6:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <strstr>
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	d9 f0       	breq	.+54     	; 0xd24 <uart_korisni_dio+0xd6>
	{
		ret = strstr(uart_poruka,"STATUS:");
     cee:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <ret+0x1>
     cf2:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <ret>
		int vrijednost = atoi(ret+7);
     cf6:	07 96       	adiw	r24, 0x07	; 7
     cf8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <atoi>
		
		if (vrijednost==5)
     cfc:	05 97       	sbiw	r24, 0x05	; 5
     cfe:	19 f4       	brne	.+6      	; 0xd06 <uart_korisni_dio+0xb8>
			wifi_stanje=false;
     d00:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <wifi_stanje>
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <uart_korisni_dio+0xbe>
		else
			wifi_stanje=true;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <wifi_stanje>
		//ocistimo uart_poruka i ret
		memset(uart_poruka,0,150);
     d0c:	86 e9       	ldi	r24, 0x96	; 150
     d0e:	e3 e5       	ldi	r30, 0x53	; 83
     d10:	f2 e0       	ldi	r31, 0x02	; 2
     d12:	df 01       	movw	r26, r30
     d14:	1d 92       	st	X+, r1
     d16:	8a 95       	dec	r24
     d18:	e9 f7       	brne	.-6      	; 0xd14 <uart_korisni_dio+0xc6>
		ret =0;
     d1a:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <ret+0x1>
     d1e:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <ret>
     d22:	2c c0       	rjmp	.+88     	; 0xd7c <uart_korisni_dio+0x12e>
	}
	else if (strstr(uart_poruka,"WIFI CONNECTED")!=NULL)
     d24:	62 ed       	ldi	r22, 0xD2	; 210
     d26:	71 e0       	ldi	r23, 0x01	; 1
     d28:	83 e5       	ldi	r24, 0x53	; 83
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <strstr>
     d30:	89 2b       	or	r24, r25
     d32:	79 f0       	breq	.+30     	; 0xd52 <uart_korisni_dio+0x104>
	{
		wifi_stanje=true;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <wifi_stanje>
		//ocistimo uart_poruka i ret
		memset(uart_poruka,0,150);
     d3a:	86 e9       	ldi	r24, 0x96	; 150
     d3c:	e3 e5       	ldi	r30, 0x53	; 83
     d3e:	f2 e0       	ldi	r31, 0x02	; 2
     d40:	df 01       	movw	r26, r30
     d42:	1d 92       	st	X+, r1
     d44:	8a 95       	dec	r24
     d46:	e9 f7       	brne	.-6      	; 0xd42 <uart_korisni_dio+0xf4>
		ret =0;
     d48:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <ret+0x1>
     d4c:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <ret>
     d50:	15 c0       	rjmp	.+42     	; 0xd7c <uart_korisni_dio+0x12e>
	}
	else if (strstr(uart_poruka,"FAIL")!=NULL)
     d52:	61 ee       	ldi	r22, 0xE1	; 225
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	83 e5       	ldi	r24, 0x53	; 83
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <strstr>
     d5e:	89 2b       	or	r24, r25
     d60:	69 f0       	breq	.+26     	; 0xd7c <uart_korisni_dio+0x12e>
	{
		wifi_stanje=false;
     d62:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <wifi_stanje>
		//ocistimo uart_poruka i ret
		memset(uart_poruka,0,150);
     d66:	86 e9       	ldi	r24, 0x96	; 150
     d68:	e3 e5       	ldi	r30, 0x53	; 83
     d6a:	f2 e0       	ldi	r31, 0x02	; 2
     d6c:	df 01       	movw	r26, r30
     d6e:	1d 92       	st	X+, r1
     d70:	8a 95       	dec	r24
     d72:	e9 f7       	brne	.-6      	; 0xd6e <uart_korisni_dio+0x120>
		ret =0;
     d74:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <ret+0x1>
     d78:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <ret>
	}
}
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <uart_primi>:
	ocekivani_odgovor - podatak koji ocekujemo ukoliko smo uspjesno poslali poruku
	neocekivani_odgovor + podatak koji ocekujemo ukoliko smo neuspjesno poslali poruku
	Funkcija nevraca nikakav podatak */

void uart_primi(uint8_t field,char* ocekivani_odgovor,char* neocekivani_odgovor)
{
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	d8 2f       	mov	r29, r24
     d92:	7b 01       	movw	r14, r22
     d94:	6a 01       	movw	r12, r20
	uint8_t i=0;
     d96:	c0 e0       	ldi	r28, 0x00	; 0
	//primaj poruku sve dok nedodjes do ocekivani_odgovor ili neocekivani_odgovor
	do          
	{
		uart_poruka[i]=USART_Recieve();
     d98:	0c 2f       	mov	r16, r28
     d9a:	10 e0       	ldi	r17, 0x00	; 0
     d9c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <USART_Recieve>
     da0:	f8 01       	movw	r30, r16
     da2:	ed 5a       	subi	r30, 0xAD	; 173
     da4:	fd 4f       	sbci	r31, 0xFD	; 253
     da6:	80 83       	st	Z, r24
		i++;
     da8:	cf 5f       	subi	r28, 0xFF	; 255
		if (i==150)
     daa:	c6 39       	cpi	r28, 0x96	; 150
     dac:	09 f4       	brne	.+2      	; 0xdb0 <uart_primi+0x30>
		{
			i=0;
     dae:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}while ((strstr(uart_poruka,ocekivani_odgovor)==NULL)&&(strstr(uart_poruka,neocekivani_odgovor)==NULL));
     db0:	b7 01       	movw	r22, r14
     db2:	83 e5       	ldi	r24, 0x53	; 83
     db4:	92 e0       	ldi	r25, 0x02	; 2
     db6:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <strstr>
     dba:	89 2b       	or	r24, r25
     dbc:	39 f4       	brne	.+14     	; 0xdcc <uart_primi+0x4c>
     dbe:	b6 01       	movw	r22, r12
     dc0:	83 e5       	ldi	r24, 0x53	; 83
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <strstr>
     dc8:	89 2b       	or	r24, r25
     dca:	31 f3       	breq	.-52     	; 0xd98 <uart_primi+0x18>
	
	
	if (strstr(uart_poruka,"ERROR")!=NULL)
     dcc:	66 ee       	ldi	r22, 0xE6	; 230
     dce:	71 e0       	ldi	r23, 0x01	; 1
     dd0:	83 e5       	ldi	r24, 0x53	; 83
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <strstr>
     dd8:	89 2b       	or	r24, r25
     dda:	59 f0       	breq	.+22     	; 0xdf2 <uart_primi+0x72>
	{
		memset(uart_poruka,0,150);
     ddc:	86 e9       	ldi	r24, 0x96	; 150
     dde:	e3 e5       	ldi	r30, 0x53	; 83
     de0:	f2 e0       	ldi	r31, 0x02	; 2
     de2:	df 01       	movw	r26, r30
     de4:	1d 92       	st	X+, r1
     de6:	8a 95       	dec	r24
     de8:	e9 f7       	brne	.-6      	; 0xde4 <uart_primi+0x64>
		ret =0;
     dea:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <ret+0x1>
     dee:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <ret>
	}
	uart_korisni_dio(field);
     df2:	8d 2f       	mov	r24, r29
     df4:	0e 94 27 06 	call	0xc4e	; 0xc4e <uart_korisni_dio>
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	08 95       	ret

00000e0a <esp_wifi>:
/* Funkcija koja salje s atmega16 na esp8266 preko uarta
	AT komandu za spajanje na wifi mrezu
	Funkcija neprima nikakav podatak i nevraca nikakav podatak */
 
void esp_wifi(void)
{
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	ec 97       	sbiw	r28, 0x3c	; 60
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[60];
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", SSID, PASSWORD);
     e22:	8c ee       	ldi	r24, 0xEC	; 236
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	9f 93       	push	r25
     e30:	8f 93       	push	r24
     e32:	8f e0       	ldi	r24, 0x0F	; 15
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	9f 93       	push	r25
     e38:	8f 93       	push	r24
     e3a:	8e 01       	movw	r16, r28
     e3c:	0f 5f       	subi	r16, 0xFF	; 255
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	1f 93       	push	r17
     e42:	0f 93       	push	r16
     e44:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sprintf>
	USART_SendString(_atCommand);
     e48:	c8 01       	movw	r24, r16
     e4a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
	USART_SendString("\r\n");
     e4e:	8e e2       	ldi	r24, 0x2E	; 46
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
	uart_primi(0,"WIFI CONNECTED","FAIL");
     e56:	41 ee       	ldi	r20, 0xE1	; 225
     e58:	51 e0       	ldi	r21, 0x01	; 1
     e5a:	62 ed       	ldi	r22, 0xD2	; 210
     e5c:	71 e0       	ldi	r23, 0x01	; 1
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0e 94 c0 06 	call	0xd80	; 0xd80 <uart_primi>
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	8f e7       	ldi	r24, 0x7F	; 127
     e68:	93 e4       	ldi	r25, 0x43	; 67
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <esp_wifi+0x60>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <esp_wifi+0x6a>
     e74:	00 00       	nop
	_delay_ms(2000);
}
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	ec 96       	adiw	r28, 0x3c	; 60
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	08 95       	ret

00000e96 <main>:

int main(void)
{	
	//int b=0;
//***** OUTPUT ********
	DDRD = 0b11111100;									// ukljuci sve pinove za port D
     e96:	8c ef       	ldi	r24, 0xFC	; 252
     e98:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b11111100;									//pocetna vrijednost outputa 1
     e9a:	82 bb       	out	0x12, r24	; 18
	DDRC = 0b11000000;									// ukljuci sve pinove za port D
     e9c:	80 ec       	ldi	r24, 0xC0	; 192
     e9e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b11000000;
     ea0:	85 bb       	out	0x15, r24	; 21
//***** INPUT ********
	DDRB = 0x00;									// postavit  pinove na input na portu B 
     ea2:	17 ba       	out	0x17, r1	; 23
	PORTB = 0b01111111;								// odabrati koristenje zeljenog moda
     ea4:	8f e7       	ldi	r24, 0x7F	; 127
     ea6:	88 bb       	out	0x18, r24	; 24
	SFIOR &= ~(1<<PUD);								// odabrati koristenje zeljenog moda
     ea8:	80 b7       	in	r24, 0x30	; 48
     eaa:	8b 7f       	andi	r24, 0xFB	; 251
     eac:	80 bf       	out	0x30, r24	; 48
	
	I2C_Init();										/* Initialize I2C */
     eae:	0e 94 49 00 	call	0x92	; 0x92 <I2C_Init>
	lcd_init(LCD_DISP_ON);							/* Initialize LCD16x2 */
     eb2:	8c e0       	ldi	r24, 0x0C	; 12
     eb4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_init>
	USART_Init(115200);
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	72 ec       	ldi	r23, 0xC2	; 194
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <USART_Init>
     ec4:	2f ef       	ldi	r18, 0xFF	; 255
     ec6:	3f eb       	ldi	r19, 0xBF	; 191
     ec8:	81 e2       	ldi	r24, 0x21	; 33
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	80 40       	sbci	r24, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <main+0x34>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <main+0x3e>
     ed4:	00 00       	nop
	
	//RTC_Clock_Write(0x20, 0x01, 0x00, hour_24); //Zapisuje sat, minute, sekunde u tocno ovom formatu
	//RTC_Calendar_Write(0x1, 0x30, 0x8, 0x21);	// Zapisuje redni broj dana u tjednu, dan u mjesecu, mjesec i godinu
	
	_delay_ms(1000);
	USART_SendString("AT+CIPSTATUS\r\n");
     ed6:	82 e2       	ldi	r24, 0x22	; 34
     ed8:	92 e0       	ldi	r25, 0x02	; 2
     eda:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
	uart_primi(1,"OK","ERROR");
     ede:	46 ee       	ldi	r20, 0xE6	; 230
     ee0:	51 e0       	ldi	r21, 0x01	; 1
     ee2:	61 e3       	ldi	r22, 0x31	; 49
     ee4:	72 e0       	ldi	r23, 0x02	; 2
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	0e 94 c0 06 	call	0xd80	; 0xd80 <uart_primi>
	if (wifi_stanje==false)
     eec:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <wifi_stanje>
     ef0:	81 11       	cpse	r24, r1
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <main+0x62>
	{
		esp_wifi();
     ef4:	0e 94 05 07 	call	0xe0a	; 0xe0a <esp_wifi>
	}

    while(1)
    {
		RTC_Read_Clock(0);
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <RTC_Read_Clock>
		psat =BCDToDecimal(hour) ;
     efe:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <hour>
     f02:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <hour+0x1>
     f06:	0e 94 5f 02 	call	0x4be	; 0x4be <BCDToDecimal>
     f0a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <psat>
		pmin = BCDToDecimal(minute);
     f0e:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <minute>
     f12:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <minute+0x1>
     f16:	0e 94 5f 02 	call	0x4be	; 0x4be <BCDToDecimal>
     f1a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pmin>
		psec = BCDToDecimal(second);
     f1e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <second>
     f22:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <second+0x1>
     f26:	0e 94 5f 02 	call	0x4be	; 0x4be <BCDToDecimal>
     f2a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end>
		
		switch (screenPicker)						// switch case pomocu kojeg biramo na kojem smo ekranu
     f2e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <screenPicker>
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	09 f4       	brne	.+2      	; 0xf38 <main+0xa2>
     f36:	81 c1       	rjmp	.+770    	; 0x123a <main+0x3a4>
     f38:	20 f0       	brcs	.+8      	; 0xf42 <main+0xac>
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	09 f4       	brne	.+2      	; 0xf40 <main+0xaa>
     f3e:	71 c3       	rjmp	.+1762   	; 0x1622 <main+0x78c>
     f40:	e0 c4       	rjmp	.+2496   	; 0x1902 <main+0xa6c>
		{
//***** home screen ********
		case 0:
		
			screen0();
     f42:	0e 94 78 02 	call	0x4f0	; 0x4f0 <screen0>
			
				if (psec==30)
     f46:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
     f4a:	8e 31       	cpi	r24, 0x1E	; 30
     f4c:	09 f0       	breq	.+2      	; 0xf50 <main+0xba>
     f4e:	55 c0       	rjmp	.+170    	; 0xffa <main+0x164>
				{	
					USART_SendString("AT+CIPSTATUS\r\n");
     f50:	82 e2       	ldi	r24, 0x22	; 34
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <USART_SendString>
					uart_primi(1,"OK","ERROR");
     f58:	46 ee       	ldi	r20, 0xE6	; 230
     f5a:	51 e0       	ldi	r21, 0x01	; 1
     f5c:	61 e3       	ldi	r22, 0x31	; 49
     f5e:	72 e0       	ldi	r23, 0x02	; 2
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	0e 94 c0 06 	call	0xd80	; 0xd80 <uart_primi>
					lcd_gotoxy(15,0);
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	8f e0       	ldi	r24, 0x0F	; 15
     f6a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
					lcd_puts("*");
     f6e:	84 e3       	ldi	r24, 0x34	; 52
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
					if (wifi_stanje==false)
     f76:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <wifi_stanje>
     f7a:	81 11       	cpse	r24, r1
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <main+0xec>
						esp_wifi();
     f7e:	0e 94 05 07 	call	0xe0a	; 0xe0a <esp_wifi>
					
					if (wifi_stanje==true)
     f82:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <wifi_stanje>
     f86:	88 23       	and	r24, r24
     f88:	c1 f1       	breq	.+112    	; 0xffa <main+0x164>
					{
						//USART_SendString("AT");
						esp_site();
     f8a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <esp_site>
						esp_local_update(1);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	0e 94 c8 05 	call	0xb90	; 0xb90 <esp_local_update>
						uart_primi(1,"CLO","ERROR");
     f94:	46 ee       	ldi	r20, 0xE6	; 230
     f96:	51 e0       	ldi	r21, 0x01	; 1
     f98:	61 ec       	ldi	r22, 0xC1	; 193
     f9a:	71 e0       	ldi	r23, 0x01	; 1
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	0e 94 c0 06 	call	0xd80	; 0xd80 <uart_primi>
						esp_site();
     fa2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <esp_site>
						esp_local_update(2);
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	0e 94 c8 05 	call	0xb90	; 0xb90 <esp_local_update>
						uart_primi(2,"CLO","ERROR");
     fac:	46 ee       	ldi	r20, 0xE6	; 230
     fae:	51 e0       	ldi	r21, 0x01	; 1
     fb0:	61 ec       	ldi	r22, 0xC1	; 193
     fb2:	71 e0       	ldi	r23, 0x01	; 1
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	0e 94 c0 06 	call	0xd80	; 0xd80 <uart_primi>
						esp_site();
     fba:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <esp_site>
						esp_local_update(3);
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	0e 94 c8 05 	call	0xb90	; 0xb90 <esp_local_update>
						uart_primi(3,"CLO","ERROR");
     fc4:	46 ee       	ldi	r20, 0xE6	; 230
     fc6:	51 e0       	ldi	r21, 0x01	; 1
     fc8:	61 ec       	ldi	r22, 0xC1	; 193
     fca:	71 e0       	ldi	r23, 0x01	; 1
     fcc:	83 e0       	ldi	r24, 0x03	; 3
     fce:	0e 94 c0 06 	call	0xd80	; 0xd80 <uart_primi>
						esp_site();
     fd2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <esp_site>
						esp_local_update(4);
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	0e 94 c8 05 	call	0xb90	; 0xb90 <esp_local_update>
						uart_primi(4,"CLO","ERROR");
     fdc:	46 ee       	ldi	r20, 0xE6	; 230
     fde:	51 e0       	ldi	r21, 0x01	; 1
     fe0:	61 ec       	ldi	r22, 0xC1	; 193
     fe2:	71 e0       	ldi	r23, 0x01	; 1
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	0e 94 c0 06 	call	0xd80	; 0xd80 <uart_primi>
						lcd_gotoxy(15,0);
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	8f e0       	ldi	r24, 0x0F	; 15
     fee:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
						lcd_puts(" ");
     ff2:	87 e8       	ldi	r24, 0x87	; 135
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
					}
				}
				/////////////////////////////////////////////////////////////////////////////////////////////////////////
				if (button_state(edit))
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1002:	88 23       	and	r24, r24
    1004:	09 f4       	brne	.+2      	; 0x1008 <main+0x172>
    1006:	01 c1       	rjmp	.+514    	; 0x120a <main+0x374>
				{
					int postaviH = psat;
    1008:	00 91 46 02 	lds	r16, 0x0246	; 0x800246 <psat>
    100c:	10 e0       	ldi	r17, 0x00	; 0
					int postaviM = pmin;
    100e:	c0 91 45 02 	lds	r28, 0x0245	; 0x800245 <pmin>
    1012:	d0 e0       	ldi	r29, 0x00	; 0
					
					do
					{
						switch (editMenu)
    1014:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    1018:	88 23       	and	r24, r24
    101a:	21 f0       	breq	.+8      	; 0x1024 <main+0x18e>
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	09 f4       	brne	.+2      	; 0x1022 <main+0x18c>
    1020:	53 c0       	rjmp	.+166    	; 0x10c8 <main+0x232>
    1022:	ba c0       	rjmp	.+372    	; 0x1198 <main+0x302>
						{
							case 0:
							
							lcd_gotoxy(4,0);
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
							lcd_puts(">");
    102c:	86 e3       	ldi	r24, 0x36	; 54
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
							screen01(postaviH,postaviM);
    1034:	be 01       	movw	r22, r28
    1036:	c8 01       	movw	r24, r16
    1038:	0e 94 ff 02 	call	0x5fe	; 0x5fe <screen01>
							if (button_state(plus))
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1044:	88 23       	and	r24, r24
    1046:	89 f0       	breq	.+34     	; 0x106a <main+0x1d4>
							{
								postaviH++;
								postaviH = intervalH(postaviH);
    1048:	c8 01       	movw	r24, r16
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	0e 94 a6 04 	call	0x94c	; 0x94c <intervalH>
    1050:	8c 01       	movw	r16, r24
								screen01(postaviH,postaviM);
    1052:	be 01       	movw	r22, r28
    1054:	0e 94 ff 02 	call	0x5fe	; 0x5fe <screen01>
    1058:	9f ef       	ldi	r25, 0xFF	; 255
    105a:	2f eb       	ldi	r18, 0xBF	; 191
    105c:	36 e0       	ldi	r19, 0x06	; 6
    105e:	91 50       	subi	r25, 0x01	; 1
    1060:	20 40       	sbci	r18, 0x00	; 0
    1062:	30 40       	sbci	r19, 0x00	; 0
    1064:	e1 f7       	brne	.-8      	; 0x105e <main+0x1c8>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <main+0x1d2>
    1068:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(minus))
    106a:	85 e0       	ldi	r24, 0x05	; 5
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1072:	88 23       	and	r24, r24
    1074:	89 f0       	breq	.+34     	; 0x1098 <main+0x202>
							{
								postaviH--;
								postaviH = intervalH(postaviH);
    1076:	c8 01       	movw	r24, r16
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	0e 94 a6 04 	call	0x94c	; 0x94c <intervalH>
    107e:	8c 01       	movw	r16, r24
								screen01(postaviH,postaviM);
    1080:	be 01       	movw	r22, r28
    1082:	0e 94 ff 02 	call	0x5fe	; 0x5fe <screen01>
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	9f eb       	ldi	r25, 0xBF	; 191
    108a:	26 e0       	ldi	r18, 0x06	; 6
    108c:	81 50       	subi	r24, 0x01	; 1
    108e:	90 40       	sbci	r25, 0x00	; 0
    1090:	20 40       	sbci	r18, 0x00	; 0
    1092:	e1 f7       	brne	.-8      	; 0x108c <main+0x1f6>
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <main+0x200>
    1096:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(next))
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    10a0:	88 23       	and	r24, r24
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <main+0x210>
    10a4:	79 c0       	rjmp	.+242    	; 0x1198 <main+0x302>
							{
								editMenu++;
    10a6:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    10b0:	3f ef       	ldi	r19, 0xFF	; 255
    10b2:	8f eb       	ldi	r24, 0xBF	; 191
    10b4:	96 e0       	ldi	r25, 0x06	; 6
    10b6:	31 50       	subi	r19, 0x01	; 1
    10b8:	80 40       	sbci	r24, 0x00	; 0
    10ba:	90 40       	sbci	r25, 0x00	; 0
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <main+0x220>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <main+0x22a>
    10c0:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    10c2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    10c6:	68 c0       	rjmp	.+208    	; 0x1198 <main+0x302>
								
							}
							break;
							
							case 1:
							lcd_gotoxy(10,0);
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	8a e0       	ldi	r24, 0x0A	; 10
    10cc:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
							lcd_puts("<");
    10d0:	88 e3       	ldi	r24, 0x38	; 56
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
							screen01(postaviH,postaviM);
    10d8:	be 01       	movw	r22, r28
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <screen01>
							if (button_state(plus))
    10e0:	84 e0       	ldi	r24, 0x04	; 4
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    10e8:	88 23       	and	r24, r24
    10ea:	91 f0       	breq	.+36     	; 0x1110 <main+0x27a>
							{
								postaviM++;
								postaviM = intervalM(postaviM);
    10ec:	ce 01       	movw	r24, r28
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    10f4:	ec 01       	movw	r28, r24
								screen01(postaviH,postaviM);
    10f6:	bc 01       	movw	r22, r24
    10f8:	c8 01       	movw	r24, r16
    10fa:	0e 94 ff 02 	call	0x5fe	; 0x5fe <screen01>
    10fe:	2f ef       	ldi	r18, 0xFF	; 255
    1100:	3f eb       	ldi	r19, 0xBF	; 191
    1102:	86 e0       	ldi	r24, 0x06	; 6
    1104:	21 50       	subi	r18, 0x01	; 1
    1106:	30 40       	sbci	r19, 0x00	; 0
    1108:	80 40       	sbci	r24, 0x00	; 0
    110a:	e1 f7       	brne	.-8      	; 0x1104 <main+0x26e>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <main+0x278>
    110e:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(minus))
    1110:	85 e0       	ldi	r24, 0x05	; 5
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1118:	88 23       	and	r24, r24
    111a:	91 f0       	breq	.+36     	; 0x1140 <main+0x2aa>
							{
								postaviM--;
								postaviM = intervalM(postaviM);
    111c:	ce 01       	movw	r24, r28
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    1124:	ec 01       	movw	r28, r24
								screen01(postaviH,postaviM);
    1126:	bc 01       	movw	r22, r24
    1128:	c8 01       	movw	r24, r16
    112a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <screen01>
    112e:	9f ef       	ldi	r25, 0xFF	; 255
    1130:	2f eb       	ldi	r18, 0xBF	; 191
    1132:	36 e0       	ldi	r19, 0x06	; 6
    1134:	91 50       	subi	r25, 0x01	; 1
    1136:	20 40       	sbci	r18, 0x00	; 0
    1138:	30 40       	sbci	r19, 0x00	; 0
    113a:	e1 f7       	brne	.-8      	; 0x1134 <main+0x29e>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <main+0x2a8>
    113e:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(next))
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1148:	88 23       	and	r24, r24
    114a:	81 f0       	breq	.+32     	; 0x116c <main+0x2d6>
							{
								editMenu++;
    114c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	9f eb       	ldi	r25, 0xBF	; 191
    115a:	26 e0       	ldi	r18, 0x06	; 6
    115c:	81 50       	subi	r24, 0x01	; 1
    115e:	90 40       	sbci	r25, 0x00	; 0
    1160:	20 40       	sbci	r18, 0x00	; 0
    1162:	e1 f7       	brne	.-8      	; 0x115c <main+0x2c6>
    1164:	00 c0       	rjmp	.+0      	; 0x1166 <main+0x2d0>
    1166:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    1168:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
							}
							if (button_state(prev))
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1174:	88 23       	and	r24, r24
    1176:	81 f0       	breq	.+32     	; 0x1198 <main+0x302>
							{
								editMenu--;
    1178:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    117c:	81 50       	subi	r24, 0x01	; 1
    117e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    1182:	3f ef       	ldi	r19, 0xFF	; 255
    1184:	8f eb       	ldi	r24, 0xBF	; 191
    1186:	96 e0       	ldi	r25, 0x06	; 6
    1188:	31 50       	subi	r19, 0x01	; 1
    118a:	80 40       	sbci	r24, 0x00	; 0
    118c:	90 40       	sbci	r25, 0x00	; 0
    118e:	e1 f7       	brne	.-8      	; 0x1188 <main+0x2f2>
    1190:	00 c0       	rjmp	.+0      	; 0x1192 <main+0x2fc>
    1192:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    1194:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
								
							}
							break;
						}
					} while (button_state(set)!=1);
    1198:	83 e0       	ldi	r24, 0x03	; 3
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <main+0x310>
    11a4:	37 cf       	rjmp	.-402    	; 0x1014 <main+0x17e>
					if (postaviH > 9 && postaviH < 20)
    11a6:	c8 01       	movw	r24, r16
    11a8:	0a 97       	sbiw	r24, 0x0a	; 10
    11aa:	0a 97       	sbiw	r24, 0x0a	; 10
    11ac:	18 f4       	brcc	.+6      	; 0x11b4 <main+0x31e>
						postaviH = postaviH + 6;
    11ae:	0a 5f       	subi	r16, 0xFA	; 250
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <main+0x328>
					else if(postaviH >= 20)
    11b4:	04 31       	cpi	r16, 0x14	; 20
    11b6:	11 05       	cpc	r17, r1
    11b8:	14 f0       	brlt	.+4      	; 0x11be <main+0x328>
						postaviH = postaviH + 12;
    11ba:	04 5f       	subi	r16, 0xF4	; 244
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
					
					if (postaviM > 9 && postaviM < 20)
    11be:	9e 01       	movw	r18, r28
    11c0:	ce 01       	movw	r24, r28
    11c2:	0a 97       	sbiw	r24, 0x0a	; 10
    11c4:	0a 97       	sbiw	r24, 0x0a	; 10
    11c6:	10 f4       	brcc	.+4      	; 0x11cc <main+0x336>
						postaviM = postaviM + 6;
    11c8:	26 96       	adiw	r28, 0x06	; 6
    11ca:	17 c0       	rjmp	.+46     	; 0x11fa <main+0x364>
					else if(postaviM >= 20 && postaviM < 30)
    11cc:	ce 01       	movw	r24, r28
    11ce:	44 97       	sbiw	r24, 0x14	; 20
    11d0:	0a 97       	sbiw	r24, 0x0a	; 10
    11d2:	10 f4       	brcc	.+4      	; 0x11d8 <main+0x342>
						postaviM = postaviM + 12; 
    11d4:	2c 96       	adiw	r28, 0x0c	; 12
    11d6:	11 c0       	rjmp	.+34     	; 0x11fa <main+0x364>
					else if(postaviM >= 30 && postaviM < 40)
    11d8:	ce 01       	movw	r24, r28
    11da:	4e 97       	sbiw	r24, 0x1e	; 30
    11dc:	0a 97       	sbiw	r24, 0x0a	; 10
    11de:	10 f4       	brcc	.+4      	; 0x11e4 <main+0x34e>
						postaviM = postaviM + 18;
    11e0:	62 96       	adiw	r28, 0x12	; 18
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <main+0x364>
					else if(postaviM >= 40 && postaviM < 50)
    11e4:	28 52       	subi	r18, 0x28	; 40
    11e6:	31 09       	sbc	r19, r1
    11e8:	2a 30       	cpi	r18, 0x0A	; 10
    11ea:	31 05       	cpc	r19, r1
    11ec:	10 f4       	brcc	.+4      	; 0x11f2 <main+0x35c>
						postaviM = postaviM + 24;
    11ee:	68 96       	adiw	r28, 0x18	; 24
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <main+0x364>
					else if(postaviM >= 50)
    11f2:	c2 33       	cpi	r28, 0x32	; 50
    11f4:	d1 05       	cpc	r29, r1
    11f6:	0c f0       	brlt	.+2      	; 0x11fa <main+0x364>
						postaviM = postaviM + 30;
    11f8:	6e 96       	adiw	r28, 0x1e	; 30

					RTC_Clock_Write(postaviH, postaviM, 0x00, hour_24);/* Write Hour Minute Second Format */
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	6c 2f       	mov	r22, r28
    1200:	80 2f       	mov	r24, r16
    1202:	0e 94 a8 01 	call	0x350	; 0x350 <RTC_Clock_Write>
					lcd_clrscr();// ocisti ekran kad izadjes iz edit moda
    1206:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
				}
				///////////////////////////////////////////////////////////////////////////////////////////////////////////
						
			if (button_state(next))						// provjera dali je pritisnuta tipka next
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1212:	88 23       	and	r24, r24
    1214:	09 f4       	brne	.+2      	; 0x1218 <main+0x382>
    1216:	75 c3       	rjmp	.+1770   	; 0x1902 <main+0xa6c>
			{
				screenPicker++;							// povecamo varijablu kako bi usli u case 1 od switch case (screen 1)
    1218:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <screenPicker>
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <screenPicker>
				lcd_clrscr();							// obrisemo sve s ekrana
    1222:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    1226:	2f ef       	ldi	r18, 0xFF	; 255
    1228:	3f eb       	ldi	r19, 0xBF	; 191
    122a:	86 e0       	ldi	r24, 0x06	; 6
    122c:	21 50       	subi	r18, 0x01	; 1
    122e:	30 40       	sbci	r19, 0x00	; 0
    1230:	80 40       	sbci	r24, 0x00	; 0
    1232:	e1 f7       	brne	.-8      	; 0x122c <main+0x396>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <main+0x3a0>
    1236:	00 00       	nop
    1238:	64 c3       	rjmp	.+1736   	; 0x1902 <main+0xa6c>
				_delay_ms(200);							// pricekamo 200 ms kako nebi jedan pritisak registrirao vise puta
			}
		 break;
//***** screen 1 **********
		case 1:
			screen1();
    123a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
			if (button_state(edit))						// provjera dali je stisnuta edit tipka, ako je ulazimo u edit mode
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1246:	88 23       	and	r24, r24
    1248:	09 f4       	brne	.+2      	; 0x124c <main+0x3b6>
    124a:	bd c1       	rjmp	.+890    	; 0x15c6 <main+0x730>
			{
				do										// zadrzavamo se u edit modu sve dok se nepritisne tipka set
				{
					switch (editMenu)					// switch case s kojim odredujemo koju varijablu zelimo editirati
    124c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	09 f4       	brne	.+2      	; 0x1256 <main+0x3c0>
    1254:	5c c0       	rjmp	.+184    	; 0x130e <main+0x478>
    1256:	38 f0       	brcs	.+14     	; 0x1266 <main+0x3d0>
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	09 f4       	brne	.+2      	; 0x125e <main+0x3c8>
    125c:	c2 c0       	rjmp	.+388    	; 0x13e2 <main+0x54c>
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	09 f4       	brne	.+2      	; 0x1264 <main+0x3ce>
    1262:	29 c1       	rjmp	.+594    	; 0x14b6 <main+0x620>
    1264:	7a c1       	rjmp	.+756    	; 0x155a <main+0x6c4>
					{
						case 0:							// editiranje sati kada se pali svjetlo
						
							lcd_gotoxy(0,1);
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
							lcd_puts(">");				// pomocu ovog korisniku dajemo do znanja da je u edit modu i koju varijablu trenutno editira
    126e:	86 e3       	ldi	r24, 0x36	; 54
    1270:	92 e0       	ldi	r25, 0x02	; 2
    1272:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
							screen1();
    1276:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
							if (button_state(plus))		// ako se stisne ili drzi tipka plus povecavaj brojcanik
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1282:	88 23       	and	r24, r24
    1284:	99 f0       	breq	.+38     	; 0x12ac <main+0x416>
							{
								hourONtime++;
    1286:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <hourONtime>
    128a:	8f 5f       	subi	r24, 0xFF	; 255
								hourONtime = intervalH(hourONtime);
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 a6 04 	call	0x94c	; 0x94c <intervalH>
    1292:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <hourONtime>
								screen1();
    1296:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
    129a:	9f ef       	ldi	r25, 0xFF	; 255
    129c:	2f eb       	ldi	r18, 0xBF	; 191
    129e:	36 e0       	ldi	r19, 0x06	; 6
    12a0:	91 50       	subi	r25, 0x01	; 1
    12a2:	20 40       	sbci	r18, 0x00	; 0
    12a4:	30 40       	sbci	r19, 0x00	; 0
    12a6:	e1 f7       	brne	.-8      	; 0x12a0 <main+0x40a>
    12a8:	00 c0       	rjmp	.+0      	; 0x12aa <main+0x414>
    12aa:	00 00       	nop
								_delay_ms(200);			// omogucuje da pritisak registrira samo jednom a drzanje vise puta
							}
							if (button_state(minus))	// ako se stisne ili drzi tipka minus smanjuj brojcanik
    12ac:	85 e0       	ldi	r24, 0x05	; 5
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    12b4:	88 23       	and	r24, r24
    12b6:	99 f0       	breq	.+38     	; 0x12de <main+0x448>
							{
								hourONtime--;
    12b8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <hourONtime>
    12bc:	81 50       	subi	r24, 0x01	; 1
								hourONtime = intervalH(hourONtime);
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 a6 04 	call	0x94c	; 0x94c <intervalH>
    12c4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <hourONtime>
								screen1();
    12c8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	9f eb       	ldi	r25, 0xBF	; 191
    12d0:	26 e0       	ldi	r18, 0x06	; 6
    12d2:	81 50       	subi	r24, 0x01	; 1
    12d4:	90 40       	sbci	r25, 0x00	; 0
    12d6:	20 40       	sbci	r18, 0x00	; 0
    12d8:	e1 f7       	brne	.-8      	; 0x12d2 <main+0x43c>
    12da:	00 c0       	rjmp	.+0      	; 0x12dc <main+0x446>
    12dc:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(next))		// ako se stisne tipka next prelazimo na sljedecu varijablu koju cemo editirat
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    12e6:	88 23       	and	r24, r24
    12e8:	09 f4       	brne	.+2      	; 0x12ec <main+0x456>
    12ea:	37 c1       	rjmp	.+622    	; 0x155a <main+0x6c4>
							{
								editMenu++;
    12ec:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    12f0:	8f 5f       	subi	r24, 0xFF	; 255
    12f2:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    12f6:	3f ef       	ldi	r19, 0xFF	; 255
    12f8:	8f eb       	ldi	r24, 0xBF	; 191
    12fa:	96 e0       	ldi	r25, 0x06	; 6
    12fc:	31 50       	subi	r19, 0x01	; 1
    12fe:	80 40       	sbci	r24, 0x00	; 0
    1300:	90 40       	sbci	r25, 0x00	; 0
    1302:	e1 f7       	brne	.-8      	; 0x12fc <main+0x466>
    1304:	00 c0       	rjmp	.+0      	; 0x1306 <main+0x470>
    1306:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    1308:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    130c:	26 c1       	rjmp	.+588    	; 0x155a <main+0x6c4>
							}
						break;
						
						case 1:
						
							lcd_gotoxy(6,1);
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	86 e0       	ldi	r24, 0x06	; 6
    1312:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
							lcd_puts("<");
    1316:	88 e3       	ldi	r24, 0x38	; 56
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
							screen1();
    131e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
	
							if (button_state(plus))		
    1322:	84 e0       	ldi	r24, 0x04	; 4
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    132a:	88 23       	and	r24, r24
    132c:	99 f0       	breq	.+38     	; 0x1354 <main+0x4be>
							{
								minuteONtime++;
    132e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <minuteONtime>
    1332:	8f 5f       	subi	r24, 0xFF	; 255
								minuteONtime = intervalM(minuteONtime);
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    133a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <minuteONtime>
								screen1();
    133e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
    1342:	2f ef       	ldi	r18, 0xFF	; 255
    1344:	3f eb       	ldi	r19, 0xBF	; 191
    1346:	86 e0       	ldi	r24, 0x06	; 6
    1348:	21 50       	subi	r18, 0x01	; 1
    134a:	30 40       	sbci	r19, 0x00	; 0
    134c:	80 40       	sbci	r24, 0x00	; 0
    134e:	e1 f7       	brne	.-8      	; 0x1348 <main+0x4b2>
    1350:	00 c0       	rjmp	.+0      	; 0x1352 <main+0x4bc>
    1352:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(minus))
    1354:	85 e0       	ldi	r24, 0x05	; 5
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    135c:	88 23       	and	r24, r24
    135e:	99 f0       	breq	.+38     	; 0x1386 <main+0x4f0>
							{
								minuteONtime--;
    1360:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <minuteONtime>
    1364:	81 50       	subi	r24, 0x01	; 1
								minuteONtime = intervalM(minuteONtime);
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    136c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <minuteONtime>
								screen1();
    1370:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
    1374:	9f ef       	ldi	r25, 0xFF	; 255
    1376:	2f eb       	ldi	r18, 0xBF	; 191
    1378:	36 e0       	ldi	r19, 0x06	; 6
    137a:	91 50       	subi	r25, 0x01	; 1
    137c:	20 40       	sbci	r18, 0x00	; 0
    137e:	30 40       	sbci	r19, 0x00	; 0
    1380:	e1 f7       	brne	.-8      	; 0x137a <main+0x4e4>
    1382:	00 c0       	rjmp	.+0      	; 0x1384 <main+0x4ee>
    1384:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(next))
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    138e:	88 23       	and	r24, r24
    1390:	81 f0       	breq	.+32     	; 0x13b2 <main+0x51c>
							{
								editMenu++;
    1392:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    1396:	8f 5f       	subi	r24, 0xFF	; 255
    1398:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    139c:	8f ef       	ldi	r24, 0xFF	; 255
    139e:	9f eb       	ldi	r25, 0xBF	; 191
    13a0:	26 e0       	ldi	r18, 0x06	; 6
    13a2:	81 50       	subi	r24, 0x01	; 1
    13a4:	90 40       	sbci	r25, 0x00	; 0
    13a6:	20 40       	sbci	r18, 0x00	; 0
    13a8:	e1 f7       	brne	.-8      	; 0x13a2 <main+0x50c>
    13aa:	00 c0       	rjmp	.+0      	; 0x13ac <main+0x516>
    13ac:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();	
    13ae:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
							}
							if (button_state(prev))
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    13ba:	88 23       	and	r24, r24
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <main+0x52a>
    13be:	cd c0       	rjmp	.+410    	; 0x155a <main+0x6c4>
							{
								editMenu--;
    13c0:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    13c4:	81 50       	subi	r24, 0x01	; 1
    13c6:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    13ca:	3f ef       	ldi	r19, 0xFF	; 255
    13cc:	8f eb       	ldi	r24, 0xBF	; 191
    13ce:	96 e0       	ldi	r25, 0x06	; 6
    13d0:	31 50       	subi	r19, 0x01	; 1
    13d2:	80 40       	sbci	r24, 0x00	; 0
    13d4:	90 40       	sbci	r25, 0x00	; 0
    13d6:	e1 f7       	brne	.-8      	; 0x13d0 <main+0x53a>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <main+0x544>
    13da:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    13dc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    13e0:	bc c0       	rjmp	.+376    	; 0x155a <main+0x6c4>
								
							}		
						break;
						
						case 2:
							lcd_gotoxy(9,1);
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	89 e0       	ldi	r24, 0x09	; 9
    13e6:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
							lcd_puts(">");
    13ea:	86 e3       	ldi	r24, 0x36	; 54
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
							screen1();
    13f2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
							if (button_state(plus))
    13f6:	84 e0       	ldi	r24, 0x04	; 4
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    13fe:	88 23       	and	r24, r24
    1400:	99 f0       	breq	.+38     	; 0x1428 <main+0x592>
							{
								hourOFFtime++;
    1402:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <hourOFFtime>
    1406:	8f 5f       	subi	r24, 0xFF	; 255
								hourOFFtime = intervalH(hourOFFtime);
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 a6 04 	call	0x94c	; 0x94c <intervalH>
    140e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <hourOFFtime>
								screen1();
    1412:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
    1416:	2f ef       	ldi	r18, 0xFF	; 255
    1418:	3f eb       	ldi	r19, 0xBF	; 191
    141a:	86 e0       	ldi	r24, 0x06	; 6
    141c:	21 50       	subi	r18, 0x01	; 1
    141e:	30 40       	sbci	r19, 0x00	; 0
    1420:	80 40       	sbci	r24, 0x00	; 0
    1422:	e1 f7       	brne	.-8      	; 0x141c <main+0x586>
    1424:	00 c0       	rjmp	.+0      	; 0x1426 <main+0x590>
    1426:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(minus))
    1428:	85 e0       	ldi	r24, 0x05	; 5
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1430:	88 23       	and	r24, r24
    1432:	99 f0       	breq	.+38     	; 0x145a <main+0x5c4>
							{
								hourOFFtime--;
    1434:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <hourOFFtime>
    1438:	81 50       	subi	r24, 0x01	; 1
								hourOFFtime = intervalH(hourOFFtime);
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 a6 04 	call	0x94c	; 0x94c <intervalH>
    1440:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <hourOFFtime>
								screen1();
    1444:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
    1448:	9f ef       	ldi	r25, 0xFF	; 255
    144a:	2f eb       	ldi	r18, 0xBF	; 191
    144c:	36 e0       	ldi	r19, 0x06	; 6
    144e:	91 50       	subi	r25, 0x01	; 1
    1450:	20 40       	sbci	r18, 0x00	; 0
    1452:	30 40       	sbci	r19, 0x00	; 0
    1454:	e1 f7       	brne	.-8      	; 0x144e <main+0x5b8>
    1456:	00 c0       	rjmp	.+0      	; 0x1458 <main+0x5c2>
    1458:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(next))
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1462:	88 23       	and	r24, r24
    1464:	81 f0       	breq	.+32     	; 0x1486 <main+0x5f0>
							{
								editMenu++;
    1466:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	9f eb       	ldi	r25, 0xBF	; 191
    1474:	26 e0       	ldi	r18, 0x06	; 6
    1476:	81 50       	subi	r24, 0x01	; 1
    1478:	90 40       	sbci	r25, 0x00	; 0
    147a:	20 40       	sbci	r18, 0x00	; 0
    147c:	e1 f7       	brne	.-8      	; 0x1476 <main+0x5e0>
    147e:	00 c0       	rjmp	.+0      	; 0x1480 <main+0x5ea>
    1480:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    1482:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
							}
							if (button_state(prev))
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    148e:	88 23       	and	r24, r24
    1490:	09 f4       	brne	.+2      	; 0x1494 <main+0x5fe>
    1492:	63 c0       	rjmp	.+198    	; 0x155a <main+0x6c4>
							{
								editMenu--;
    1494:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    1498:	81 50       	subi	r24, 0x01	; 1
    149a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    149e:	3f ef       	ldi	r19, 0xFF	; 255
    14a0:	8f eb       	ldi	r24, 0xBF	; 191
    14a2:	96 e0       	ldi	r25, 0x06	; 6
    14a4:	31 50       	subi	r19, 0x01	; 1
    14a6:	80 40       	sbci	r24, 0x00	; 0
    14a8:	90 40       	sbci	r25, 0x00	; 0
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <main+0x60e>
    14ac:	00 c0       	rjmp	.+0      	; 0x14ae <main+0x618>
    14ae:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    14b0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    14b4:	52 c0       	rjmp	.+164    	; 0x155a <main+0x6c4>
							}
						break;
						
						case 3:
							lcd_gotoxy(15,1);
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	8f e0       	ldi	r24, 0x0F	; 15
    14ba:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
							lcd_puts("<");
    14be:	88 e3       	ldi	r24, 0x38	; 56
    14c0:	92 e0       	ldi	r25, 0x02	; 2
    14c2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
							screen1();
    14c6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
							if (button_state(plus))
    14ca:	84 e0       	ldi	r24, 0x04	; 4
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    14d2:	88 23       	and	r24, r24
    14d4:	99 f0       	breq	.+38     	; 0x14fc <main+0x666>
							{
								minuteOFFtime++;
    14d6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <minuteOFFtime>
    14da:	8f 5f       	subi	r24, 0xFF	; 255
								minuteOFFtime = intervalM(minuteOFFtime);
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    14e2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <minuteOFFtime>
								screen1();
    14e6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
    14ea:	2f ef       	ldi	r18, 0xFF	; 255
    14ec:	3f eb       	ldi	r19, 0xBF	; 191
    14ee:	86 e0       	ldi	r24, 0x06	; 6
    14f0:	21 50       	subi	r18, 0x01	; 1
    14f2:	30 40       	sbci	r19, 0x00	; 0
    14f4:	80 40       	sbci	r24, 0x00	; 0
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <main+0x65a>
    14f8:	00 c0       	rjmp	.+0      	; 0x14fa <main+0x664>
    14fa:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(minus))
    14fc:	85 e0       	ldi	r24, 0x05	; 5
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1504:	88 23       	and	r24, r24
    1506:	99 f0       	breq	.+38     	; 0x152e <main+0x698>
							{
								minuteOFFtime--;
    1508:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <minuteOFFtime>
    150c:	81 50       	subi	r24, 0x01	; 1
								minuteOFFtime = intervalM(minuteOFFtime);
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    1514:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <minuteOFFtime>
								screen1();
    1518:	0e 94 7e 03 	call	0x6fc	; 0x6fc <screen1>
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	2f eb       	ldi	r18, 0xBF	; 191
    1520:	36 e0       	ldi	r19, 0x06	; 6
    1522:	91 50       	subi	r25, 0x01	; 1
    1524:	20 40       	sbci	r18, 0x00	; 0
    1526:	30 40       	sbci	r19, 0x00	; 0
    1528:	e1 f7       	brne	.-8      	; 0x1522 <main+0x68c>
    152a:	00 c0       	rjmp	.+0      	; 0x152c <main+0x696>
    152c:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(prev))
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1536:	88 23       	and	r24, r24
    1538:	81 f0       	breq	.+32     	; 0x155a <main+0x6c4>
							{
								editMenu--;
    153a:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	9f eb       	ldi	r25, 0xBF	; 191
    1548:	26 e0       	ldi	r18, 0x06	; 6
    154a:	81 50       	subi	r24, 0x01	; 1
    154c:	90 40       	sbci	r25, 0x00	; 0
    154e:	20 40       	sbci	r18, 0x00	; 0
    1550:	e1 f7       	brne	.-8      	; 0x154a <main+0x6b4>
    1552:	00 c0       	rjmp	.+0      	; 0x1554 <main+0x6be>
    1554:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    1556:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
							}	
						break;
					}
				} while (button_state(set)!=1);					// zadrzavamo se u edit modu sve dok se nepritisne tipka set
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	09 f0       	breq	.+2      	; 0x1568 <main+0x6d2>
    1566:	72 ce       	rjmp	.-796    	; 0x124c <main+0x3b6>
				if (wifi_stanje == true)
    1568:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <wifi_stanje>
    156c:	88 23       	and	r24, r24
    156e:	49 f1       	breq	.+82     	; 0x15c2 <main+0x72c>
				{
					lcd_clrscr();
    1570:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
					lcd_gotoxy(4,0);
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	84 e0       	ldi	r24, 0x04	; 4
    1578:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
					lcd_puts("UPDATING");
    157c:	8a e3       	ldi	r24, 0x3A	; 58
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
					esp_site();
    1584:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <esp_site>
					esp_publish(1,2,hourONtime,minuteONtime);
    1588:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <minuteONtime>
    158c:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <hourONtime>
    1590:	62 e0       	ldi	r22, 0x02	; 2
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	0e 94 38 05 	call	0xa70	; 0xa70 <esp_publish>
    1598:	3f ef       	ldi	r19, 0xFF	; 255
    159a:	8f ee       	ldi	r24, 0xEF	; 239
    159c:	93 eb       	ldi	r25, 0xB3	; 179
    159e:	21 e0       	ldi	r18, 0x01	; 1
    15a0:	31 50       	subi	r19, 0x01	; 1
    15a2:	80 40       	sbci	r24, 0x00	; 0
    15a4:	90 40       	sbci	r25, 0x00	; 0
    15a6:	20 40       	sbci	r18, 0x00	; 0
    15a8:	d9 f7       	brne	.-10     	; 0x15a0 <main+0x70a>
    15aa:	00 c0       	rjmp	.+0      	; 0x15ac <main+0x716>
    15ac:	00 00       	nop
					_delay_ms(15500);
					esp_site();
    15ae:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <esp_site>
					esp_publish(2,2,hourOFFtime,minuteOFFtime);
    15b2:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <minuteOFFtime>
    15b6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <hourOFFtime>
    15ba:	62 e0       	ldi	r22, 0x02	; 2
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	0e 94 38 05 	call	0xa70	; 0xa70 <esp_publish>
				}
				lcd_clrscr();									// ocisti ekran kad izadjes iz edit moda
    15c2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
			}
			if (button_state(next))								// provjera dali pritisnuta tipka next da bi osli na sljedeci ekran
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    15ce:	88 23       	and	r24, r24
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <main+0x75c>
			{
				screenPicker++;
    15d2:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <screenPicker>
    15d6:	8f 5f       	subi	r24, 0xFF	; 255
    15d8:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <screenPicker>
				lcd_clrscr();
    15dc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	8f eb       	ldi	r24, 0xBF	; 191
    15e4:	96 e0       	ldi	r25, 0x06	; 6
    15e6:	31 50       	subi	r19, 0x01	; 1
    15e8:	80 40       	sbci	r24, 0x00	; 0
    15ea:	90 40       	sbci	r25, 0x00	; 0
    15ec:	e1 f7       	brne	.-8      	; 0x15e6 <main+0x750>
    15ee:	00 c0       	rjmp	.+0      	; 0x15f0 <main+0x75a>
    15f0:	00 00       	nop
				_delay_ms(200);
			}

			if (button_state(prev))								// provjera dali pritisnuta tipka prev da bi osli na prosli ekran
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    15fa:	88 23       	and	r24, r24
    15fc:	09 f4       	brne	.+2      	; 0x1600 <main+0x76a>
    15fe:	81 c1       	rjmp	.+770    	; 0x1902 <main+0xa6c>
			{
				screenPicker--;
    1600:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <screenPicker>
    1604:	81 50       	subi	r24, 0x01	; 1
    1606:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <screenPicker>
				lcd_clrscr();
    160a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    160e:	2f ef       	ldi	r18, 0xFF	; 255
    1610:	3f eb       	ldi	r19, 0xBF	; 191
    1612:	86 e0       	ldi	r24, 0x06	; 6
    1614:	21 50       	subi	r18, 0x01	; 1
    1616:	30 40       	sbci	r19, 0x00	; 0
    1618:	80 40       	sbci	r24, 0x00	; 0
    161a:	e1 f7       	brne	.-8      	; 0x1614 <main+0x77e>
    161c:	00 c0       	rjmp	.+0      	; 0x161e <main+0x788>
    161e:	00 00       	nop
    1620:	70 c1       	rjmp	.+736    	; 0x1902 <main+0xa6c>
				_delay_ms(200);
			}
		break;
//******* screen 2 ***********
		case 2:
			screen2();
    1622:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
			editMenu=0;											// postavimo editMenu na 0 kako bi krenili editiranje od prve varijable
    1626:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <editMenu>
			if (button_state(edit))
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1632:	88 23       	and	r24, r24
    1634:	09 f4       	brne	.+2      	; 0x1638 <main+0x7a2>
    1636:	4f c1       	rjmp	.+670    	; 0x18d6 <main+0xa40>
			{
				do
				{
					switch (editMenu)
    1638:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	09 f4       	brne	.+2      	; 0x1642 <main+0x7ac>
    1640:	59 c0       	rjmp	.+178    	; 0x16f4 <main+0x85e>
    1642:	20 f0       	brcs	.+8      	; 0x164c <main+0x7b6>
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	09 f4       	brne	.+2      	; 0x164a <main+0x7b4>
    1648:	bf c0       	rjmp	.+382    	; 0x17c8 <main+0x932>
    164a:	10 c1       	rjmp	.+544    	; 0x186c <main+0x9d6>
					{
						case 0:
			
							lcd_gotoxy(6,0);
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	86 e0       	ldi	r24, 0x06	; 6
    1650:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
							lcd_puts(">");
    1654:	86 e3       	ldi	r24, 0x36	; 54
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
							screen2();
    165c:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
							if (button_state(plus))
    1660:	84 e0       	ldi	r24, 0x04	; 4
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1668:	88 23       	and	r24, r24
    166a:	99 f0       	breq	.+38     	; 0x1692 <main+0x7fc>
							{
								gateInterval++;
    166c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1670:	8f 5f       	subi	r24, 0xFF	; 255
								gateInterval = intervalM(gateInterval);
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    1678:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
								screen2();
    167c:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
    1680:	9f ef       	ldi	r25, 0xFF	; 255
    1682:	2f eb       	ldi	r18, 0xBF	; 191
    1684:	36 e0       	ldi	r19, 0x06	; 6
    1686:	91 50       	subi	r25, 0x01	; 1
    1688:	20 40       	sbci	r18, 0x00	; 0
    168a:	30 40       	sbci	r19, 0x00	; 0
    168c:	e1 f7       	brne	.-8      	; 0x1686 <main+0x7f0>
    168e:	00 c0       	rjmp	.+0      	; 0x1690 <main+0x7fa>
    1690:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(minus))
    1692:	85 e0       	ldi	r24, 0x05	; 5
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    169a:	88 23       	and	r24, r24
    169c:	99 f0       	breq	.+38     	; 0x16c4 <main+0x82e>
							{
								gateInterval--;
    169e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    16a2:	81 50       	subi	r24, 0x01	; 1
								gateInterval = intervalM(gateInterval);
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    16aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
								screen2();
    16ae:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	9f eb       	ldi	r25, 0xBF	; 191
    16b6:	26 e0       	ldi	r18, 0x06	; 6
    16b8:	81 50       	subi	r24, 0x01	; 1
    16ba:	90 40       	sbci	r25, 0x00	; 0
    16bc:	20 40       	sbci	r18, 0x00	; 0
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <main+0x822>
    16c0:	00 c0       	rjmp	.+0      	; 0x16c2 <main+0x82c>
    16c2:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(next))
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    16cc:	88 23       	and	r24, r24
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <main+0x83c>
    16d0:	cd c0       	rjmp	.+410    	; 0x186c <main+0x9d6>
							{
								editMenu++;
    16d2:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	8f eb       	ldi	r24, 0xBF	; 191
    16e0:	96 e0       	ldi	r25, 0x06	; 6
    16e2:	31 50       	subi	r19, 0x01	; 1
    16e4:	80 40       	sbci	r24, 0x00	; 0
    16e6:	90 40       	sbci	r25, 0x00	; 0
    16e8:	e1 f7       	brne	.-8      	; 0x16e2 <main+0x84c>
    16ea:	00 c0       	rjmp	.+0      	; 0x16ec <main+0x856>
    16ec:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    16ee:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    16f2:	bc c0       	rjmp	.+376    	; 0x186c <main+0x9d6>
				
							}	
						break;
			
						case 1:
							lcd_gotoxy(3,1);
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
							lcd_puts(">");
    16fc:	86 e3       	ldi	r24, 0x36	; 54
    16fe:	92 e0       	ldi	r25, 0x02	; 2
    1700:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
							screen2();
    1704:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
							if (button_state(plus))
    1708:	84 e0       	ldi	r24, 0x04	; 4
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1710:	88 23       	and	r24, r24
    1712:	99 f0       	breq	.+38     	; 0x173a <main+0x8a4>
							{
								gateOFFtimeH++;
    1714:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gateOFFtimeH>
    1718:	8f 5f       	subi	r24, 0xFF	; 255
								gateOFFtimeH = intervalH(gateOFFtimeH);
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 a6 04 	call	0x94c	; 0x94c <intervalH>
    1720:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gateOFFtimeH>
								screen2();
    1724:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
    1728:	2f ef       	ldi	r18, 0xFF	; 255
    172a:	3f eb       	ldi	r19, 0xBF	; 191
    172c:	86 e0       	ldi	r24, 0x06	; 6
    172e:	21 50       	subi	r18, 0x01	; 1
    1730:	30 40       	sbci	r19, 0x00	; 0
    1732:	80 40       	sbci	r24, 0x00	; 0
    1734:	e1 f7       	brne	.-8      	; 0x172e <main+0x898>
    1736:	00 c0       	rjmp	.+0      	; 0x1738 <main+0x8a2>
    1738:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(minus))
    173a:	85 e0       	ldi	r24, 0x05	; 5
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1742:	88 23       	and	r24, r24
    1744:	99 f0       	breq	.+38     	; 0x176c <main+0x8d6>
							{
								gateOFFtimeH--;
    1746:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gateOFFtimeH>
    174a:	81 50       	subi	r24, 0x01	; 1
								gateOFFtimeH = intervalH(gateOFFtimeH);
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 a6 04 	call	0x94c	; 0x94c <intervalH>
    1752:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gateOFFtimeH>
								screen2();
    1756:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	2f eb       	ldi	r18, 0xBF	; 191
    175e:	36 e0       	ldi	r19, 0x06	; 6
    1760:	91 50       	subi	r25, 0x01	; 1
    1762:	20 40       	sbci	r18, 0x00	; 0
    1764:	30 40       	sbci	r19, 0x00	; 0
    1766:	e1 f7       	brne	.-8      	; 0x1760 <main+0x8ca>
    1768:	00 c0       	rjmp	.+0      	; 0x176a <main+0x8d4>
    176a:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(next))
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1774:	88 23       	and	r24, r24
    1776:	81 f0       	breq	.+32     	; 0x1798 <main+0x902>
							{
								editMenu++;
    1778:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    177c:	8f 5f       	subi	r24, 0xFF	; 255
    177e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	9f eb       	ldi	r25, 0xBF	; 191
    1786:	26 e0       	ldi	r18, 0x06	; 6
    1788:	81 50       	subi	r24, 0x01	; 1
    178a:	90 40       	sbci	r25, 0x00	; 0
    178c:	20 40       	sbci	r18, 0x00	; 0
    178e:	e1 f7       	brne	.-8      	; 0x1788 <main+0x8f2>
    1790:	00 c0       	rjmp	.+0      	; 0x1792 <main+0x8fc>
    1792:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    1794:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
							}
							if (button_state(prev))
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    17a0:	88 23       	and	r24, r24
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <main+0x910>
    17a4:	63 c0       	rjmp	.+198    	; 0x186c <main+0x9d6>
							{
								editMenu--;
    17a6:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    17aa:	81 50       	subi	r24, 0x01	; 1
    17ac:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    17b0:	3f ef       	ldi	r19, 0xFF	; 255
    17b2:	8f eb       	ldi	r24, 0xBF	; 191
    17b4:	96 e0       	ldi	r25, 0x06	; 6
    17b6:	31 50       	subi	r19, 0x01	; 1
    17b8:	80 40       	sbci	r24, 0x00	; 0
    17ba:	90 40       	sbci	r25, 0x00	; 0
    17bc:	e1 f7       	brne	.-8      	; 0x17b6 <main+0x920>
    17be:	00 c0       	rjmp	.+0      	; 0x17c0 <main+0x92a>
    17c0:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    17c2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    17c6:	52 c0       	rjmp	.+164    	; 0x186c <main+0x9d6>
				
							}
						break;
			
						case 2:
							lcd_gotoxy(10,1);
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	8a e0       	ldi	r24, 0x0A	; 10
    17cc:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
							lcd_puts("<");
    17d0:	88 e3       	ldi	r24, 0x38	; 56
    17d2:	92 e0       	ldi	r25, 0x02	; 2
    17d4:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
							screen2();
    17d8:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
							if (button_state(plus))
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    17e4:	88 23       	and	r24, r24
    17e6:	99 f0       	breq	.+38     	; 0x180e <main+0x978>
							{
								gateOFFtimeM++;
    17e8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gateOFFtimeM>
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
								gateOFFtimeM = intervalM(gateOFFtimeM);
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    17f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gateOFFtimeM>
								screen2();
    17f8:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
    17fc:	2f ef       	ldi	r18, 0xFF	; 255
    17fe:	3f eb       	ldi	r19, 0xBF	; 191
    1800:	86 e0       	ldi	r24, 0x06	; 6
    1802:	21 50       	subi	r18, 0x01	; 1
    1804:	30 40       	sbci	r19, 0x00	; 0
    1806:	80 40       	sbci	r24, 0x00	; 0
    1808:	e1 f7       	brne	.-8      	; 0x1802 <main+0x96c>
    180a:	00 c0       	rjmp	.+0      	; 0x180c <main+0x976>
    180c:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(minus))
    180e:	85 e0       	ldi	r24, 0x05	; 5
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1816:	88 23       	and	r24, r24
    1818:	99 f0       	breq	.+38     	; 0x1840 <main+0x9aa>
							{
								gateOFFtimeM--;
    181a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gateOFFtimeM>
    181e:	81 50       	subi	r24, 0x01	; 1
								gateOFFtimeM = intervalM(gateOFFtimeM);
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 b0 04 	call	0x960	; 0x960 <intervalM>
    1826:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gateOFFtimeM>
								screen2();
    182a:	0e 94 09 04 	call	0x812	; 0x812 <screen2>
    182e:	9f ef       	ldi	r25, 0xFF	; 255
    1830:	2f eb       	ldi	r18, 0xBF	; 191
    1832:	36 e0       	ldi	r19, 0x06	; 6
    1834:	91 50       	subi	r25, 0x01	; 1
    1836:	20 40       	sbci	r18, 0x00	; 0
    1838:	30 40       	sbci	r19, 0x00	; 0
    183a:	e1 f7       	brne	.-8      	; 0x1834 <main+0x99e>
    183c:	00 c0       	rjmp	.+0      	; 0x183e <main+0x9a8>
    183e:	00 00       	nop
								_delay_ms(200);
							}
							if (button_state(prev))
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1848:	88 23       	and	r24, r24
    184a:	81 f0       	breq	.+32     	; 0x186c <main+0x9d6>
							{
								editMenu--;
    184c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <editMenu>
    1850:	81 50       	subi	r24, 0x01	; 1
    1852:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <editMenu>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	9f eb       	ldi	r25, 0xBF	; 191
    185a:	26 e0       	ldi	r18, 0x06	; 6
    185c:	81 50       	subi	r24, 0x01	; 1
    185e:	90 40       	sbci	r25, 0x00	; 0
    1860:	20 40       	sbci	r18, 0x00	; 0
    1862:	e1 f7       	brne	.-8      	; 0x185c <main+0x9c6>
    1864:	00 c0       	rjmp	.+0      	; 0x1866 <main+0x9d0>
    1866:	00 00       	nop
								_delay_ms(200);
								lcd_clrscr();
    1868:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
							}
						break;
					}
				} while (button_state(set)!=1);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	09 f0       	breq	.+2      	; 0x187a <main+0x9e4>
    1878:	df ce       	rjmp	.-578    	; 0x1638 <main+0x7a2>
				
				if (wifi_stanje == true)
    187a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <wifi_stanje>
    187e:	88 23       	and	r24, r24
    1880:	41 f1       	breq	.+80     	; 0x18d2 <main+0xa3c>
				{
					lcd_clrscr();
    1882:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
					lcd_gotoxy(4,0);
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	84 e0       	ldi	r24, 0x04	; 4
    188a:	0e 94 29 01 	call	0x252	; 0x252 <lcd_gotoxy>
					lcd_puts("UPDATING");
    188e:	8a e3       	ldi	r24, 0x3A	; 58
    1890:	92 e0       	ldi	r25, 0x02	; 2
    1892:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
					esp_site();
    1896:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <esp_site>
					esp_publish(3,1,gateInterval,0);
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	0e 94 38 05 	call	0xa70	; 0xa70 <esp_publish>
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	8f ee       	ldi	r24, 0xEF	; 239
    18ac:	93 eb       	ldi	r25, 0xB3	; 179
    18ae:	21 e0       	ldi	r18, 0x01	; 1
    18b0:	31 50       	subi	r19, 0x01	; 1
    18b2:	80 40       	sbci	r24, 0x00	; 0
    18b4:	90 40       	sbci	r25, 0x00	; 0
    18b6:	20 40       	sbci	r18, 0x00	; 0
    18b8:	d9 f7       	brne	.-10     	; 0x18b0 <main+0xa1a>
    18ba:	00 c0       	rjmp	.+0      	; 0x18bc <main+0xa26>
    18bc:	00 00       	nop
					_delay_ms(15500);
					esp_site();
    18be:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <esp_site>
					esp_publish(4,2,gateOFFtimeH,gateOFFtimeM);
    18c2:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <gateOFFtimeM>
    18c6:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <gateOFFtimeH>
    18ca:	62 e0       	ldi	r22, 0x02	; 2
    18cc:	84 e0       	ldi	r24, 0x04	; 4
    18ce:	0e 94 38 05 	call	0xa70	; 0xa70 <esp_publish>
				}
				lcd_clrscr();// ocisti ekran kad izadjes iz edit moda
    18d2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
			}

			if (button_state(prev))								// na zadnjem ekranu ocekujemo samo pritisak tipke za odlazak na prosli ekran
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 3c 02 	call	0x478	; 0x478 <button_state>
    18de:	88 23       	and	r24, r24
    18e0:	81 f0       	breq	.+32     	; 0x1902 <main+0xa6c>
			{
				screenPicker = screenPicker-1;
    18e2:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <screenPicker>
    18e6:	81 50       	subi	r24, 0x01	; 1
    18e8:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <screenPicker>
				lcd_clrscr();
    18ec:	0e 94 33 01 	call	0x266	; 0x266 <lcd_clrscr>
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	8f eb       	ldi	r24, 0xBF	; 191
    18f4:	96 e0       	ldi	r25, 0x06	; 6
    18f6:	31 50       	subi	r19, 0x01	; 1
    18f8:	80 40       	sbci	r24, 0x00	; 0
    18fa:	90 40       	sbci	r25, 0x00	; 0
    18fc:	e1 f7       	brne	.-8      	; 0x18f6 <main+0xa60>
    18fe:	00 c0       	rjmp	.+0      	; 0x1900 <main+0xa6a>
    1900:	00 00       	nop

		//***************************************************
		// paljenje i gasenje
		//***************************************************
		
		if (gateFlag == false)									// ovaj dio koda ce se izvrsavat samo ako su vrata zatvorena (nisu bila otvorena u odredjenom intervalu)
    1902:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <gateFlag>
    1906:	81 11       	cpse	r24, r1
    1908:	2a c0       	rjmp	.+84     	; 0x195e <main+0xac8>
		{
			if ( (psat > hourONtime) && (psat < hourOFFtime) )	// ovaj dio gleda kada su sati > < 
    190a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <psat>
    190e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <hourONtime>
    1912:	98 17       	cp	r25, r24
    1914:	40 f4       	brcc	.+16     	; 0x1926 <main+0xa90>
    1916:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <hourOFFtime>
    191a:	82 17       	cp	r24, r18
    191c:	20 f4       	brcc	.+8      	; 0x1926 <main+0xa90>
				light = true;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <light>
    1924:	1c c0       	rjmp	.+56     	; 0x195e <main+0xac8>
			else if (psat == hourONtime && pmin >= minuteONtime) // ovaj dio gleda za tocno odredeni sat i minute ON TIME
    1926:	89 13       	cpse	r24, r25
    1928:	0a c0       	rjmp	.+20     	; 0x193e <main+0xaa8>
    192a:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <pmin>
    192e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <minuteONtime>
    1932:	29 17       	cp	r18, r25
    1934:	20 f0       	brcs	.+8      	; 0x193e <main+0xaa8>
				light = true;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <light>
    193c:	10 c0       	rjmp	.+32     	; 0x195e <main+0xac8>
			else if (psat == hourOFFtime && pmin < minuteOFFtime)  // ovaj dio gleda za tocno odredeni sat i minute OFF TIME
    193e:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <hourOFFtime>
    1942:	89 13       	cpse	r24, r25
    1944:	0a c0       	rjmp	.+20     	; 0x195a <main+0xac4>
    1946:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <pmin>
    194a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <minuteOFFtime>
    194e:	98 17       	cp	r25, r24
    1950:	20 f4       	brcc	.+8      	; 0x195a <main+0xac4>
				light = true;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <light>
    1958:	02 c0       	rjmp	.+4      	; 0x195e <main+0xac8>
			else
				light = false;
    195a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <light>
		}
//******** gate stuff ***********************************************
		if ((psat > hourOFFtime) && (psat < gateOFFtimeH))		// ovo ce se izvrsavat od trenutka gasenja svijetla do gate off time
    195e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <psat>
    1962:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <hourOFFtime>
    1966:	98 17       	cp	r25, r24
    1968:	38 f4       	brcc	.+14     	; 0x1978 <main+0xae2>
    196a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <gateOFFtimeH>
    196e:	82 17       	cp	r24, r18
    1970:	18 f4       	brcc	.+6      	; 0x1978 <main+0xae2>
			gateEvent();
    1972:	0e 94 e7 04 	call	0x9ce	; 0x9ce <gateEvent>
    1976:	28 c0       	rjmp	.+80     	; 0x19c8 <main+0xb32>
		else if ((psat == hourOFFtime) && (pmin >= minuteOFFtime))
    1978:	89 13       	cpse	r24, r25
    197a:	09 c0       	rjmp	.+18     	; 0x198e <main+0xaf8>
    197c:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <pmin>
    1980:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <minuteOFFtime>
    1984:	32 17       	cp	r19, r18
    1986:	18 f0       	brcs	.+6      	; 0x198e <main+0xaf8>
			gateEvent();
    1988:	0e 94 e7 04 	call	0x9ce	; 0x9ce <gateEvent>
    198c:	1d c0       	rjmp	.+58     	; 0x19c8 <main+0xb32>
		else if (psat == gateOFFtimeH && pmin <= gateOFFtimeM )
    198e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <gateOFFtimeH>
    1992:	82 13       	cpse	r24, r18
    1994:	09 c0       	rjmp	.+18     	; 0x19a8 <main+0xb12>
    1996:	40 91 45 02 	lds	r20, 0x0245	; 0x800245 <pmin>
    199a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <gateOFFtimeM>
    199e:	34 17       	cp	r19, r20
    19a0:	18 f0       	brcs	.+6      	; 0x19a8 <main+0xb12>
			gateEvent();
    19a2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <gateEvent>
    19a6:	10 c0       	rjmp	.+32     	; 0x19c8 <main+0xb32>
		else if (gateOFFtimeH < hourOFFtime)		// ako je vrijeme gasenja od vrata manje od OFF time 
    19a8:	29 17       	cp	r18, r25
    19aa:	70 f4       	brcc	.+28     	; 0x19c8 <main+0xb32>
		{											// podjeli na dva intervala i provjeri u kojem je
			if (psat > hourOFFtime && psat <= 24)	// od gasenja do ponoci
    19ac:	98 17       	cp	r25, r24
    19ae:	20 f4       	brcc	.+8      	; 0x19b8 <main+0xb22>
    19b0:	89 31       	cpi	r24, 0x19	; 25
    19b2:	10 f4       	brcc	.+4      	; 0x19b8 <main+0xb22>
				gateEvent();
    19b4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <gateEvent>
			if (psat < gateOFFtimeH)			// od 01 do gasenja od vrata
    19b8:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <psat>
    19bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gateOFFtimeH>
    19c0:	98 17       	cp	r25, r24
    19c2:	10 f4       	brcc	.+4      	; 0x19c8 <main+0xb32>
				gateEvent();
    19c4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <gateEvent>
		}
		
		if (gateFlag == true)		// ako su vrata otvorena/bila otvorena pocni odbrojavanje
    19c8:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <gateFlag>
    19cc:	81 11       	cpse	r24, r1
			gateTimer();
    19ce:	0e 94 ba 04 	call	0x974	; 0x974 <gateTimer>
		if (gateFlag == true)		// ako su vrata otvorena/bila otvorena (i unutar intervala od timera) upali sv
    19d2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <gateFlag>
    19d6:	88 23       	and	r24, r24
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <main+0xb4a>
			light = true;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <light>
		
		if (light)			//upali svjetlo ovisno o zastavici za light
    19e0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <light>
    19e4:	88 23       	and	r24, r24
    19e6:	19 f0       	breq	.+6      	; 0x19ee <main+0xb58>
			turnON();		
    19e8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <turnON>
    19ec:	85 ca       	rjmp	.-2806   	; 0xef8 <main+0x62>
		else
			turnOFF();		//ugasi svjetlo ovisno o zastavici za light
    19ee:	0e 94 85 04 	call	0x90a	; 0x90a <turnOFF>
    19f2:	82 ca       	rjmp	.-2812   	; 0xef8 <main+0x62>

000019f4 <USART_Init>:
#include "lcd.h"

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
	uint16_t baudPrescaler;
	baudPrescaler = (F_CPU/(16UL*BAUDRATE))-1;
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	aa 1f       	adc	r26, r26
    19fe:	bb 1f       	adc	r27, r27
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	aa 1f       	adc	r26, r26
    1a06:	bb 1f       	adc	r27, r27
    1a08:	9c 01       	movw	r18, r24
    1a0a:	ad 01       	movw	r20, r26
    1a0c:	22 0f       	add	r18, r18
    1a0e:	33 1f       	adc	r19, r19
    1a10:	44 1f       	adc	r20, r20
    1a12:	55 1f       	adc	r21, r21
    1a14:	22 0f       	add	r18, r18
    1a16:	33 1f       	adc	r19, r19
    1a18:	44 1f       	adc	r20, r20
    1a1a:	55 1f       	adc	r21, r21
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	70 ec       	ldi	r23, 0xC0	; 192
    1a20:	88 ea       	ldi	r24, 0xA8	; 168
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__udivmodsi4>
    1a28:	21 50       	subi	r18, 0x01	; 1
    1a2a:	31 09       	sbc	r19, r1
	
	//
	//#ifdef DOUBLE_SPEED_MODE
	UCSRA &=~(1 << U2X);
    1a2c:	8b b1       	in	r24, 0x0b	; 11
    1a2e:	8d 7f       	andi	r24, 0xFD	; 253
    1a30:	8b b9       	out	0x0b, r24	; 11
	//#endif
	UCSRB |= (1 << RXEN) | (1 << TXEN);				/* Enable USART transmitter and receiver */
    1a32:	8a b1       	in	r24, 0x0a	; 10
    1a34:	88 61       	ori	r24, 0x18	; 24
    1a36:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */
    1a38:	80 b5       	in	r24, 0x20	; 32
    1a3a:	86 68       	ori	r24, 0x86	; 134
    1a3c:	80 bd       	out	0x20, r24	; 32
	UBRRL = baudPrescaler;							/* Load UBRRL with lower 8 bit of prescale value */
    1a3e:	29 b9       	out	0x09, r18	; 9
	UBRRH = (baudPrescaler >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
    1a40:	30 bd       	out	0x20, r19	; 32
    1a42:	08 95       	ret

00001a44 <USART_Recieve>:
}

char USART_Recieve()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
    1a44:	5f 9b       	sbis	0x0b, 7	; 11
    1a46:	fe cf       	rjmp	.-4      	; 0x1a44 <USART_Recieve>
	return(UDR);									/* Get and return received data */
    1a48:	8c b1       	in	r24, 0x0c	; 12
}
    1a4a:	08 95       	ret

00001a4c <USART_Send>:

void USART_Send(char data)						/* Data transmitting function */
{
	while (!(UCSRA & (1<<UDRE)));					
    1a4c:	5d 9b       	sbis	0x0b, 5	; 11
    1a4e:	fe cf       	rjmp	.-4      	; 0x1a4c <USART_Send>
	UDR = data;										
    1a50:	8c b9       	out	0x0c, r24	; 12
    1a52:	08 95       	ret

00001a54 <USART_SendString>:
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	8c 01       	movw	r16, r24
	int i=0;
    1a5e:	c0 e0       	ldi	r28, 0x00	; 0
    1a60:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <USART_SendString+0x16>
	{
		USART_Send(str[i]);						/* Send each char of string till the NULL */
    1a64:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <USART_Send>
		i++;
    1a68:	21 96       	adiw	r28, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	ec 0f       	add	r30, r28
    1a6e:	fd 1f       	adc	r31, r29
    1a70:	80 81       	ld	r24, Z
    1a72:	81 11       	cpse	r24, r1
    1a74:	f7 cf       	rjmp	.-18     	; 0x1a64 <USART_SendString+0x10>
	{
		USART_Send(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

00001a80 <__fixsfsi>:
    1a80:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__fixunssfsi>
    1a84:	68 94       	set
    1a86:	b1 11       	cpse	r27, r1
    1a88:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__fp_szero>
    1a8c:	08 95       	ret

00001a8e <__fixunssfsi>:
    1a8e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fp_splitA>
    1a92:	88 f0       	brcs	.+34     	; 0x1ab6 <__fixunssfsi+0x28>
    1a94:	9f 57       	subi	r25, 0x7F	; 127
    1a96:	98 f0       	brcs	.+38     	; 0x1abe <__fixunssfsi+0x30>
    1a98:	b9 2f       	mov	r27, r25
    1a9a:	99 27       	eor	r25, r25
    1a9c:	b7 51       	subi	r27, 0x17	; 23
    1a9e:	b0 f0       	brcs	.+44     	; 0x1acc <__fixunssfsi+0x3e>
    1aa0:	e1 f0       	breq	.+56     	; 0x1ada <__fixunssfsi+0x4c>
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	1a f0       	brmi	.+6      	; 0x1ab2 <__fixunssfsi+0x24>
    1aac:	ba 95       	dec	r27
    1aae:	c9 f7       	brne	.-14     	; 0x1aa2 <__fixunssfsi+0x14>
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <__fixunssfsi+0x4c>
    1ab2:	b1 30       	cpi	r27, 0x01	; 1
    1ab4:	91 f0       	breq	.+36     	; 0x1ada <__fixunssfsi+0x4c>
    1ab6:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__fp_zero>
    1aba:	b1 e0       	ldi	r27, 0x01	; 1
    1abc:	08 95       	ret
    1abe:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__fp_zero>
    1ac2:	67 2f       	mov	r22, r23
    1ac4:	78 2f       	mov	r23, r24
    1ac6:	88 27       	eor	r24, r24
    1ac8:	b8 5f       	subi	r27, 0xF8	; 248
    1aca:	39 f0       	breq	.+14     	; 0x1ada <__fixunssfsi+0x4c>
    1acc:	b9 3f       	cpi	r27, 0xF9	; 249
    1ace:	cc f3       	brlt	.-14     	; 0x1ac2 <__fixunssfsi+0x34>
    1ad0:	86 95       	lsr	r24
    1ad2:	77 95       	ror	r23
    1ad4:	67 95       	ror	r22
    1ad6:	b3 95       	inc	r27
    1ad8:	d9 f7       	brne	.-10     	; 0x1ad0 <__fixunssfsi+0x42>
    1ada:	3e f4       	brtc	.+14     	; 0x1aea <__fixunssfsi+0x5c>
    1adc:	90 95       	com	r25
    1ade:	80 95       	com	r24
    1ae0:	70 95       	com	r23
    1ae2:	61 95       	neg	r22
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aea:	08 95       	ret

00001aec <__floatunsisf>:
    1aec:	e8 94       	clt
    1aee:	09 c0       	rjmp	.+18     	; 0x1b02 <__floatsisf+0x12>

00001af0 <__floatsisf>:
    1af0:	97 fb       	bst	r25, 7
    1af2:	3e f4       	brtc	.+14     	; 0x1b02 <__floatsisf+0x12>
    1af4:	90 95       	com	r25
    1af6:	80 95       	com	r24
    1af8:	70 95       	com	r23
    1afa:	61 95       	neg	r22
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	8f 4f       	sbci	r24, 0xFF	; 255
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	99 23       	and	r25, r25
    1b04:	a9 f0       	breq	.+42     	; 0x1b30 <__floatsisf+0x40>
    1b06:	f9 2f       	mov	r31, r25
    1b08:	96 e9       	ldi	r25, 0x96	; 150
    1b0a:	bb 27       	eor	r27, r27
    1b0c:	93 95       	inc	r25
    1b0e:	f6 95       	lsr	r31
    1b10:	87 95       	ror	r24
    1b12:	77 95       	ror	r23
    1b14:	67 95       	ror	r22
    1b16:	b7 95       	ror	r27
    1b18:	f1 11       	cpse	r31, r1
    1b1a:	f8 cf       	rjmp	.-16     	; 0x1b0c <__floatsisf+0x1c>
    1b1c:	fa f4       	brpl	.+62     	; 0x1b5c <__floatsisf+0x6c>
    1b1e:	bb 0f       	add	r27, r27
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <__floatsisf+0x36>
    1b22:	60 ff       	sbrs	r22, 0
    1b24:	1b c0       	rjmp	.+54     	; 0x1b5c <__floatsisf+0x6c>
    1b26:	6f 5f       	subi	r22, 0xFF	; 255
    1b28:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2e:	16 c0       	rjmp	.+44     	; 0x1b5c <__floatsisf+0x6c>
    1b30:	88 23       	and	r24, r24
    1b32:	11 f0       	breq	.+4      	; 0x1b38 <__floatsisf+0x48>
    1b34:	96 e9       	ldi	r25, 0x96	; 150
    1b36:	11 c0       	rjmp	.+34     	; 0x1b5a <__floatsisf+0x6a>
    1b38:	77 23       	and	r23, r23
    1b3a:	21 f0       	breq	.+8      	; 0x1b44 <__floatsisf+0x54>
    1b3c:	9e e8       	ldi	r25, 0x8E	; 142
    1b3e:	87 2f       	mov	r24, r23
    1b40:	76 2f       	mov	r23, r22
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <__floatsisf+0x5e>
    1b44:	66 23       	and	r22, r22
    1b46:	71 f0       	breq	.+28     	; 0x1b64 <__floatsisf+0x74>
    1b48:	96 e8       	ldi	r25, 0x86	; 134
    1b4a:	86 2f       	mov	r24, r22
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	2a f0       	brmi	.+10     	; 0x1b5c <__floatsisf+0x6c>
    1b52:	9a 95       	dec	r25
    1b54:	66 0f       	add	r22, r22
    1b56:	77 1f       	adc	r23, r23
    1b58:	88 1f       	adc	r24, r24
    1b5a:	da f7       	brpl	.-10     	; 0x1b52 <__floatsisf+0x62>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	96 95       	lsr	r25
    1b60:	87 95       	ror	r24
    1b62:	97 f9       	bld	r25, 7
    1b64:	08 95       	ret

00001b66 <__fp_split3>:
    1b66:	57 fd       	sbrc	r21, 7
    1b68:	90 58       	subi	r25, 0x80	; 128
    1b6a:	44 0f       	add	r20, r20
    1b6c:	55 1f       	adc	r21, r21
    1b6e:	59 f0       	breq	.+22     	; 0x1b86 <__fp_splitA+0x10>
    1b70:	5f 3f       	cpi	r21, 0xFF	; 255
    1b72:	71 f0       	breq	.+28     	; 0x1b90 <__fp_splitA+0x1a>
    1b74:	47 95       	ror	r20

00001b76 <__fp_splitA>:
    1b76:	88 0f       	add	r24, r24
    1b78:	97 fb       	bst	r25, 7
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	61 f0       	breq	.+24     	; 0x1b96 <__fp_splitA+0x20>
    1b7e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b80:	79 f0       	breq	.+30     	; 0x1ba0 <__fp_splitA+0x2a>
    1b82:	87 95       	ror	r24
    1b84:	08 95       	ret
    1b86:	12 16       	cp	r1, r18
    1b88:	13 06       	cpc	r1, r19
    1b8a:	14 06       	cpc	r1, r20
    1b8c:	55 1f       	adc	r21, r21
    1b8e:	f2 cf       	rjmp	.-28     	; 0x1b74 <__fp_split3+0xe>
    1b90:	46 95       	lsr	r20
    1b92:	f1 df       	rcall	.-30     	; 0x1b76 <__fp_splitA>
    1b94:	08 c0       	rjmp	.+16     	; 0x1ba6 <__fp_splitA+0x30>
    1b96:	16 16       	cp	r1, r22
    1b98:	17 06       	cpc	r1, r23
    1b9a:	18 06       	cpc	r1, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	f1 cf       	rjmp	.-30     	; 0x1b82 <__fp_splitA+0xc>
    1ba0:	86 95       	lsr	r24
    1ba2:	71 05       	cpc	r23, r1
    1ba4:	61 05       	cpc	r22, r1
    1ba6:	08 94       	sec
    1ba8:	08 95       	ret

00001baa <__fp_zero>:
    1baa:	e8 94       	clt

00001bac <__fp_szero>:
    1bac:	bb 27       	eor	r27, r27
    1bae:	66 27       	eor	r22, r22
    1bb0:	77 27       	eor	r23, r23
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	97 f9       	bld	r25, 7
    1bb6:	08 95       	ret

00001bb8 <__mulsf3>:
    1bb8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__mulsf3x>
    1bbc:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__fp_round>
    1bc0:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__fp_pscA>
    1bc4:	38 f0       	brcs	.+14     	; 0x1bd4 <__mulsf3+0x1c>
    1bc6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__fp_pscB>
    1bca:	20 f0       	brcs	.+8      	; 0x1bd4 <__mulsf3+0x1c>
    1bcc:	95 23       	and	r25, r21
    1bce:	11 f0       	breq	.+4      	; 0x1bd4 <__mulsf3+0x1c>
    1bd0:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_inf>
    1bd4:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_nan>
    1bd8:	11 24       	eor	r1, r1
    1bda:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__fp_szero>

00001bde <__mulsf3x>:
    1bde:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__fp_split3>
    1be2:	70 f3       	brcs	.-36     	; 0x1bc0 <__mulsf3+0x8>

00001be4 <__mulsf3_pse>:
    1be4:	95 9f       	mul	r25, r21
    1be6:	c1 f3       	breq	.-16     	; 0x1bd8 <__mulsf3+0x20>
    1be8:	95 0f       	add	r25, r21
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	55 1f       	adc	r21, r21
    1bee:	62 9f       	mul	r22, r18
    1bf0:	f0 01       	movw	r30, r0
    1bf2:	72 9f       	mul	r23, r18
    1bf4:	bb 27       	eor	r27, r27
    1bf6:	f0 0d       	add	r31, r0
    1bf8:	b1 1d       	adc	r27, r1
    1bfa:	63 9f       	mul	r22, r19
    1bfc:	aa 27       	eor	r26, r26
    1bfe:	f0 0d       	add	r31, r0
    1c00:	b1 1d       	adc	r27, r1
    1c02:	aa 1f       	adc	r26, r26
    1c04:	64 9f       	mul	r22, r20
    1c06:	66 27       	eor	r22, r22
    1c08:	b0 0d       	add	r27, r0
    1c0a:	a1 1d       	adc	r26, r1
    1c0c:	66 1f       	adc	r22, r22
    1c0e:	82 9f       	mul	r24, r18
    1c10:	22 27       	eor	r18, r18
    1c12:	b0 0d       	add	r27, r0
    1c14:	a1 1d       	adc	r26, r1
    1c16:	62 1f       	adc	r22, r18
    1c18:	73 9f       	mul	r23, r19
    1c1a:	b0 0d       	add	r27, r0
    1c1c:	a1 1d       	adc	r26, r1
    1c1e:	62 1f       	adc	r22, r18
    1c20:	83 9f       	mul	r24, r19
    1c22:	a0 0d       	add	r26, r0
    1c24:	61 1d       	adc	r22, r1
    1c26:	22 1f       	adc	r18, r18
    1c28:	74 9f       	mul	r23, r20
    1c2a:	33 27       	eor	r19, r19
    1c2c:	a0 0d       	add	r26, r0
    1c2e:	61 1d       	adc	r22, r1
    1c30:	23 1f       	adc	r18, r19
    1c32:	84 9f       	mul	r24, r20
    1c34:	60 0d       	add	r22, r0
    1c36:	21 1d       	adc	r18, r1
    1c38:	82 2f       	mov	r24, r18
    1c3a:	76 2f       	mov	r23, r22
    1c3c:	6a 2f       	mov	r22, r26
    1c3e:	11 24       	eor	r1, r1
    1c40:	9f 57       	subi	r25, 0x7F	; 127
    1c42:	50 40       	sbci	r21, 0x00	; 0
    1c44:	9a f0       	brmi	.+38     	; 0x1c6c <__mulsf3_pse+0x88>
    1c46:	f1 f0       	breq	.+60     	; 0x1c84 <__mulsf3_pse+0xa0>
    1c48:	88 23       	and	r24, r24
    1c4a:	4a f0       	brmi	.+18     	; 0x1c5e <__mulsf3_pse+0x7a>
    1c4c:	ee 0f       	add	r30, r30
    1c4e:	ff 1f       	adc	r31, r31
    1c50:	bb 1f       	adc	r27, r27
    1c52:	66 1f       	adc	r22, r22
    1c54:	77 1f       	adc	r23, r23
    1c56:	88 1f       	adc	r24, r24
    1c58:	91 50       	subi	r25, 0x01	; 1
    1c5a:	50 40       	sbci	r21, 0x00	; 0
    1c5c:	a9 f7       	brne	.-22     	; 0x1c48 <__mulsf3_pse+0x64>
    1c5e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c60:	51 05       	cpc	r21, r1
    1c62:	80 f0       	brcs	.+32     	; 0x1c84 <__mulsf3_pse+0xa0>
    1c64:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__fp_inf>
    1c68:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__fp_szero>
    1c6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c6e:	e4 f3       	brlt	.-8      	; 0x1c68 <__mulsf3_pse+0x84>
    1c70:	98 3e       	cpi	r25, 0xE8	; 232
    1c72:	d4 f3       	brlt	.-12     	; 0x1c68 <__mulsf3_pse+0x84>
    1c74:	86 95       	lsr	r24
    1c76:	77 95       	ror	r23
    1c78:	67 95       	ror	r22
    1c7a:	b7 95       	ror	r27
    1c7c:	f7 95       	ror	r31
    1c7e:	e7 95       	ror	r30
    1c80:	9f 5f       	subi	r25, 0xFF	; 255
    1c82:	c1 f7       	brne	.-16     	; 0x1c74 <__mulsf3_pse+0x90>
    1c84:	fe 2b       	or	r31, r30
    1c86:	88 0f       	add	r24, r24
    1c88:	91 1d       	adc	r25, r1
    1c8a:	96 95       	lsr	r25
    1c8c:	87 95       	ror	r24
    1c8e:	97 f9       	bld	r25, 7
    1c90:	08 95       	ret

00001c92 <__fp_inf>:
    1c92:	97 f9       	bld	r25, 7
    1c94:	9f 67       	ori	r25, 0x7F	; 127
    1c96:	80 e8       	ldi	r24, 0x80	; 128
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	08 95       	ret

00001c9e <__fp_nan>:
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	80 ec       	ldi	r24, 0xC0	; 192
    1ca2:	08 95       	ret

00001ca4 <__fp_pscA>:
    1ca4:	00 24       	eor	r0, r0
    1ca6:	0a 94       	dec	r0
    1ca8:	16 16       	cp	r1, r22
    1caa:	17 06       	cpc	r1, r23
    1cac:	18 06       	cpc	r1, r24
    1cae:	09 06       	cpc	r0, r25
    1cb0:	08 95       	ret

00001cb2 <__fp_pscB>:
    1cb2:	00 24       	eor	r0, r0
    1cb4:	0a 94       	dec	r0
    1cb6:	12 16       	cp	r1, r18
    1cb8:	13 06       	cpc	r1, r19
    1cba:	14 06       	cpc	r1, r20
    1cbc:	05 06       	cpc	r0, r21
    1cbe:	08 95       	ret

00001cc0 <__fp_round>:
    1cc0:	09 2e       	mov	r0, r25
    1cc2:	03 94       	inc	r0
    1cc4:	00 0c       	add	r0, r0
    1cc6:	11 f4       	brne	.+4      	; 0x1ccc <__fp_round+0xc>
    1cc8:	88 23       	and	r24, r24
    1cca:	52 f0       	brmi	.+20     	; 0x1ce0 <__fp_round+0x20>
    1ccc:	bb 0f       	add	r27, r27
    1cce:	40 f4       	brcc	.+16     	; 0x1ce0 <__fp_round+0x20>
    1cd0:	bf 2b       	or	r27, r31
    1cd2:	11 f4       	brne	.+4      	; 0x1cd8 <__fp_round+0x18>
    1cd4:	60 ff       	sbrs	r22, 0
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <__fp_round+0x20>
    1cd8:	6f 5f       	subi	r22, 0xFF	; 255
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	08 95       	ret

00001ce2 <__divmodhi4>:
    1ce2:	97 fb       	bst	r25, 7
    1ce4:	07 2e       	mov	r0, r23
    1ce6:	16 f4       	brtc	.+4      	; 0x1cec <__divmodhi4+0xa>
    1ce8:	00 94       	com	r0
    1cea:	07 d0       	rcall	.+14     	; 0x1cfa <__divmodhi4_neg1>
    1cec:	77 fd       	sbrc	r23, 7
    1cee:	09 d0       	rcall	.+18     	; 0x1d02 <__divmodhi4_neg2>
    1cf0:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__udivmodhi4>
    1cf4:	07 fc       	sbrc	r0, 7
    1cf6:	05 d0       	rcall	.+10     	; 0x1d02 <__divmodhi4_neg2>
    1cf8:	3e f4       	brtc	.+14     	; 0x1d08 <__divmodhi4_exit>

00001cfa <__divmodhi4_neg1>:
    1cfa:	90 95       	com	r25
    1cfc:	81 95       	neg	r24
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	08 95       	ret

00001d02 <__divmodhi4_neg2>:
    1d02:	70 95       	com	r23
    1d04:	61 95       	neg	r22
    1d06:	7f 4f       	sbci	r23, 0xFF	; 255

00001d08 <__divmodhi4_exit>:
    1d08:	08 95       	ret

00001d0a <__udivmodsi4>:
    1d0a:	a1 e2       	ldi	r26, 0x21	; 33
    1d0c:	1a 2e       	mov	r1, r26
    1d0e:	aa 1b       	sub	r26, r26
    1d10:	bb 1b       	sub	r27, r27
    1d12:	fd 01       	movw	r30, r26
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <__udivmodsi4_ep>

00001d16 <__udivmodsi4_loop>:
    1d16:	aa 1f       	adc	r26, r26
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	ee 1f       	adc	r30, r30
    1d1c:	ff 1f       	adc	r31, r31
    1d1e:	a2 17       	cp	r26, r18
    1d20:	b3 07       	cpc	r27, r19
    1d22:	e4 07       	cpc	r30, r20
    1d24:	f5 07       	cpc	r31, r21
    1d26:	20 f0       	brcs	.+8      	; 0x1d30 <__udivmodsi4_ep>
    1d28:	a2 1b       	sub	r26, r18
    1d2a:	b3 0b       	sbc	r27, r19
    1d2c:	e4 0b       	sbc	r30, r20
    1d2e:	f5 0b       	sbc	r31, r21

00001d30 <__udivmodsi4_ep>:
    1d30:	66 1f       	adc	r22, r22
    1d32:	77 1f       	adc	r23, r23
    1d34:	88 1f       	adc	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	1a 94       	dec	r1
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <__udivmodsi4_loop>
    1d3c:	60 95       	com	r22
    1d3e:	70 95       	com	r23
    1d40:	80 95       	com	r24
    1d42:	90 95       	com	r25
    1d44:	9b 01       	movw	r18, r22
    1d46:	ac 01       	movw	r20, r24
    1d48:	bd 01       	movw	r22, r26
    1d4a:	cf 01       	movw	r24, r30
    1d4c:	08 95       	ret

00001d4e <__udivmodhi4>:
    1d4e:	aa 1b       	sub	r26, r26
    1d50:	bb 1b       	sub	r27, r27
    1d52:	51 e1       	ldi	r21, 0x11	; 17
    1d54:	07 c0       	rjmp	.+14     	; 0x1d64 <__udivmodhi4_ep>

00001d56 <__udivmodhi4_loop>:
    1d56:	aa 1f       	adc	r26, r26
    1d58:	bb 1f       	adc	r27, r27
    1d5a:	a6 17       	cp	r26, r22
    1d5c:	b7 07       	cpc	r27, r23
    1d5e:	10 f0       	brcs	.+4      	; 0x1d64 <__udivmodhi4_ep>
    1d60:	a6 1b       	sub	r26, r22
    1d62:	b7 0b       	sbc	r27, r23

00001d64 <__udivmodhi4_ep>:
    1d64:	88 1f       	adc	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	5a 95       	dec	r21
    1d6a:	a9 f7       	brne	.-22     	; 0x1d56 <__udivmodhi4_loop>
    1d6c:	80 95       	com	r24
    1d6e:	90 95       	com	r25
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	08 95       	ret

00001d76 <atoi>:
    1d76:	fc 01       	movw	r30, r24
    1d78:	88 27       	eor	r24, r24
    1d7a:	99 27       	eor	r25, r25
    1d7c:	e8 94       	clt
    1d7e:	21 91       	ld	r18, Z+
    1d80:	20 32       	cpi	r18, 0x20	; 32
    1d82:	e9 f3       	breq	.-6      	; 0x1d7e <atoi+0x8>
    1d84:	29 30       	cpi	r18, 0x09	; 9
    1d86:	10 f0       	brcs	.+4      	; 0x1d8c <atoi+0x16>
    1d88:	2e 30       	cpi	r18, 0x0E	; 14
    1d8a:	c8 f3       	brcs	.-14     	; 0x1d7e <atoi+0x8>
    1d8c:	2b 32       	cpi	r18, 0x2B	; 43
    1d8e:	41 f0       	breq	.+16     	; 0x1da0 <atoi+0x2a>
    1d90:	2d 32       	cpi	r18, 0x2D	; 45
    1d92:	39 f4       	brne	.+14     	; 0x1da2 <atoi+0x2c>
    1d94:	68 94       	set
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <atoi+0x2a>
    1d98:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulhi_const_10>
    1d9c:	82 0f       	add	r24, r18
    1d9e:	91 1d       	adc	r25, r1
    1da0:	21 91       	ld	r18, Z+
    1da2:	20 53       	subi	r18, 0x30	; 48
    1da4:	2a 30       	cpi	r18, 0x0A	; 10
    1da6:	c0 f3       	brcs	.-16     	; 0x1d98 <atoi+0x22>
    1da8:	1e f4       	brtc	.+6      	; 0x1db0 <atoi+0x3a>
    1daa:	90 95       	com	r25
    1dac:	81 95       	neg	r24
    1dae:	9f 4f       	sbci	r25, 0xFF	; 255
    1db0:	08 95       	ret

00001db2 <strstr>:
    1db2:	fb 01       	movw	r30, r22
    1db4:	51 91       	ld	r21, Z+
    1db6:	55 23       	and	r21, r21
    1db8:	a9 f0       	breq	.+42     	; 0x1de4 <strstr+0x32>
    1dba:	bf 01       	movw	r22, r30
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	4d 91       	ld	r20, X+
    1dc0:	45 17       	cp	r20, r21
    1dc2:	41 11       	cpse	r20, r1
    1dc4:	e1 f7       	brne	.-8      	; 0x1dbe <strstr+0xc>
    1dc6:	59 f4       	brne	.+22     	; 0x1dde <strstr+0x2c>
    1dc8:	cd 01       	movw	r24, r26
    1dca:	01 90       	ld	r0, Z+
    1dcc:	00 20       	and	r0, r0
    1dce:	49 f0       	breq	.+18     	; 0x1de2 <strstr+0x30>
    1dd0:	4d 91       	ld	r20, X+
    1dd2:	40 15       	cp	r20, r0
    1dd4:	41 11       	cpse	r20, r1
    1dd6:	c9 f3       	breq	.-14     	; 0x1dca <strstr+0x18>
    1dd8:	fb 01       	movw	r30, r22
    1dda:	41 11       	cpse	r20, r1
    1ddc:	ef cf       	rjmp	.-34     	; 0x1dbc <strstr+0xa>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	08 95       	ret

00001de6 <__mulhi_const_10>:
    1de6:	7a e0       	ldi	r23, 0x0A	; 10
    1de8:	97 9f       	mul	r25, r23
    1dea:	90 2d       	mov	r25, r0
    1dec:	87 9f       	mul	r24, r23
    1dee:	80 2d       	mov	r24, r0
    1df0:	91 0d       	add	r25, r1
    1df2:	11 24       	eor	r1, r1
    1df4:	08 95       	ret

00001df6 <snprintf>:
    1df6:	ae e0       	ldi	r26, 0x0E	; 14
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e1 e0       	ldi	r30, 0x01	; 1
    1dfc:	ff e0       	ldi	r31, 0x0F	; 15
    1dfe:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x1c>
    1e02:	0d 89       	ldd	r16, Y+21	; 0x15
    1e04:	1e 89       	ldd	r17, Y+22	; 0x16
    1e06:	8f 89       	ldd	r24, Y+23	; 0x17
    1e08:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0a:	26 e0       	ldi	r18, 0x06	; 6
    1e0c:	2c 83       	std	Y+4, r18	; 0x04
    1e0e:	1a 83       	std	Y+2, r17	; 0x02
    1e10:	09 83       	std	Y+1, r16	; 0x01
    1e12:	97 ff       	sbrs	r25, 7
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <snprintf+0x24>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e8       	ldi	r25, 0x80	; 128
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	ae 01       	movw	r20, r28
    1e22:	45 5e       	subi	r20, 0xE5	; 229
    1e24:	5f 4f       	sbci	r21, 0xFF	; 255
    1e26:	69 8d       	ldd	r22, Y+25	; 0x19
    1e28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <vfprintf>
    1e32:	4d 81       	ldd	r20, Y+5	; 0x05
    1e34:	5e 81       	ldd	r21, Y+6	; 0x06
    1e36:	57 fd       	sbrc	r21, 7
    1e38:	0a c0       	rjmp	.+20     	; 0x1e4e <snprintf+0x58>
    1e3a:	2f 81       	ldd	r18, Y+7	; 0x07
    1e3c:	38 85       	ldd	r19, Y+8	; 0x08
    1e3e:	42 17       	cp	r20, r18
    1e40:	53 07       	cpc	r21, r19
    1e42:	0c f4       	brge	.+2      	; 0x1e46 <snprintf+0x50>
    1e44:	9a 01       	movw	r18, r20
    1e46:	f8 01       	movw	r30, r16
    1e48:	e2 0f       	add	r30, r18
    1e4a:	f3 1f       	adc	r31, r19
    1e4c:	10 82       	st	Z, r1
    1e4e:	2e 96       	adiw	r28, 0x0e	; 14
    1e50:	e4 e0       	ldi	r30, 0x04	; 4
    1e52:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x1c>

00001e56 <sprintf>:
    1e56:	ae e0       	ldi	r26, 0x0E	; 14
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e1 e3       	ldi	r30, 0x31	; 49
    1e5c:	ff e0       	ldi	r31, 0x0F	; 15
    1e5e:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x1c>
    1e62:	0d 89       	ldd	r16, Y+21	; 0x15
    1e64:	1e 89       	ldd	r17, Y+22	; 0x16
    1e66:	86 e0       	ldi	r24, 0x06	; 6
    1e68:	8c 83       	std	Y+4, r24	; 0x04
    1e6a:	1a 83       	std	Y+2, r17	; 0x02
    1e6c:	09 83       	std	Y+1, r16	; 0x01
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	9f e7       	ldi	r25, 0x7F	; 127
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
    1e76:	ae 01       	movw	r20, r28
    1e78:	47 5e       	subi	r20, 0xE7	; 231
    1e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e7c:	6f 89       	ldd	r22, Y+23	; 0x17
    1e7e:	78 8d       	ldd	r23, Y+24	; 0x18
    1e80:	ce 01       	movw	r24, r28
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <vfprintf>
    1e88:	ef 81       	ldd	r30, Y+7	; 0x07
    1e8a:	f8 85       	ldd	r31, Y+8	; 0x08
    1e8c:	e0 0f       	add	r30, r16
    1e8e:	f1 1f       	adc	r31, r17
    1e90:	10 82       	st	Z, r1
    1e92:	2e 96       	adiw	r28, 0x0e	; 14
    1e94:	e4 e0       	ldi	r30, 0x04	; 4
    1e96:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x1c>

00001e9a <vfprintf>:
    1e9a:	ab e0       	ldi	r26, 0x0B	; 11
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ea0:	ff e0       	ldi	r31, 0x0F	; 15
    1ea2:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__prologue_saves__>
    1ea6:	6c 01       	movw	r12, r24
    1ea8:	7b 01       	movw	r14, r22
    1eaa:	8a 01       	movw	r16, r20
    1eac:	fc 01       	movw	r30, r24
    1eae:	17 82       	std	Z+7, r1	; 0x07
    1eb0:	16 82       	std	Z+6, r1	; 0x06
    1eb2:	83 81       	ldd	r24, Z+3	; 0x03
    1eb4:	81 ff       	sbrs	r24, 1
    1eb6:	cc c1       	rjmp	.+920    	; 0x2250 <vfprintf+0x3b6>
    1eb8:	ce 01       	movw	r24, r28
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	3c 01       	movw	r6, r24
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	f7 01       	movw	r30, r14
    1ec4:	93 fd       	sbrc	r25, 3
    1ec6:	85 91       	lpm	r24, Z+
    1ec8:	93 ff       	sbrs	r25, 3
    1eca:	81 91       	ld	r24, Z+
    1ecc:	7f 01       	movw	r14, r30
    1ece:	88 23       	and	r24, r24
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <vfprintf+0x3a>
    1ed2:	ba c1       	rjmp	.+884    	; 0x2248 <vfprintf+0x3ae>
    1ed4:	85 32       	cpi	r24, 0x25	; 37
    1ed6:	39 f4       	brne	.+14     	; 0x1ee6 <vfprintf+0x4c>
    1ed8:	93 fd       	sbrc	r25, 3
    1eda:	85 91       	lpm	r24, Z+
    1edc:	93 ff       	sbrs	r25, 3
    1ede:	81 91       	ld	r24, Z+
    1ee0:	7f 01       	movw	r14, r30
    1ee2:	85 32       	cpi	r24, 0x25	; 37
    1ee4:	29 f4       	brne	.+10     	; 0x1ef0 <vfprintf+0x56>
    1ee6:	b6 01       	movw	r22, r12
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 44 11 	call	0x2288	; 0x2288 <fputc>
    1eee:	e7 cf       	rjmp	.-50     	; 0x1ebe <vfprintf+0x24>
    1ef0:	91 2c       	mov	r9, r1
    1ef2:	21 2c       	mov	r2, r1
    1ef4:	31 2c       	mov	r3, r1
    1ef6:	ff e1       	ldi	r31, 0x1F	; 31
    1ef8:	f3 15       	cp	r31, r3
    1efa:	d8 f0       	brcs	.+54     	; 0x1f32 <vfprintf+0x98>
    1efc:	8b 32       	cpi	r24, 0x2B	; 43
    1efe:	79 f0       	breq	.+30     	; 0x1f1e <vfprintf+0x84>
    1f00:	38 f4       	brcc	.+14     	; 0x1f10 <vfprintf+0x76>
    1f02:	80 32       	cpi	r24, 0x20	; 32
    1f04:	79 f0       	breq	.+30     	; 0x1f24 <vfprintf+0x8a>
    1f06:	83 32       	cpi	r24, 0x23	; 35
    1f08:	a1 f4       	brne	.+40     	; 0x1f32 <vfprintf+0x98>
    1f0a:	23 2d       	mov	r18, r3
    1f0c:	20 61       	ori	r18, 0x10	; 16
    1f0e:	1d c0       	rjmp	.+58     	; 0x1f4a <vfprintf+0xb0>
    1f10:	8d 32       	cpi	r24, 0x2D	; 45
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <vfprintf+0x92>
    1f14:	80 33       	cpi	r24, 0x30	; 48
    1f16:	69 f4       	brne	.+26     	; 0x1f32 <vfprintf+0x98>
    1f18:	23 2d       	mov	r18, r3
    1f1a:	21 60       	ori	r18, 0x01	; 1
    1f1c:	16 c0       	rjmp	.+44     	; 0x1f4a <vfprintf+0xb0>
    1f1e:	83 2d       	mov	r24, r3
    1f20:	82 60       	ori	r24, 0x02	; 2
    1f22:	38 2e       	mov	r3, r24
    1f24:	e3 2d       	mov	r30, r3
    1f26:	e4 60       	ori	r30, 0x04	; 4
    1f28:	3e 2e       	mov	r3, r30
    1f2a:	2a c0       	rjmp	.+84     	; 0x1f80 <vfprintf+0xe6>
    1f2c:	f3 2d       	mov	r31, r3
    1f2e:	f8 60       	ori	r31, 0x08	; 8
    1f30:	1d c0       	rjmp	.+58     	; 0x1f6c <vfprintf+0xd2>
    1f32:	37 fc       	sbrc	r3, 7
    1f34:	2d c0       	rjmp	.+90     	; 0x1f90 <vfprintf+0xf6>
    1f36:	20 ed       	ldi	r18, 0xD0	; 208
    1f38:	28 0f       	add	r18, r24
    1f3a:	2a 30       	cpi	r18, 0x0A	; 10
    1f3c:	40 f0       	brcs	.+16     	; 0x1f4e <vfprintf+0xb4>
    1f3e:	8e 32       	cpi	r24, 0x2E	; 46
    1f40:	b9 f4       	brne	.+46     	; 0x1f70 <vfprintf+0xd6>
    1f42:	36 fc       	sbrc	r3, 6
    1f44:	81 c1       	rjmp	.+770    	; 0x2248 <vfprintf+0x3ae>
    1f46:	23 2d       	mov	r18, r3
    1f48:	20 64       	ori	r18, 0x40	; 64
    1f4a:	32 2e       	mov	r3, r18
    1f4c:	19 c0       	rjmp	.+50     	; 0x1f80 <vfprintf+0xe6>
    1f4e:	36 fe       	sbrs	r3, 6
    1f50:	06 c0       	rjmp	.+12     	; 0x1f5e <vfprintf+0xc4>
    1f52:	8a e0       	ldi	r24, 0x0A	; 10
    1f54:	98 9e       	mul	r9, r24
    1f56:	20 0d       	add	r18, r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	92 2e       	mov	r9, r18
    1f5c:	11 c0       	rjmp	.+34     	; 0x1f80 <vfprintf+0xe6>
    1f5e:	ea e0       	ldi	r30, 0x0A	; 10
    1f60:	2e 9e       	mul	r2, r30
    1f62:	20 0d       	add	r18, r0
    1f64:	11 24       	eor	r1, r1
    1f66:	22 2e       	mov	r2, r18
    1f68:	f3 2d       	mov	r31, r3
    1f6a:	f0 62       	ori	r31, 0x20	; 32
    1f6c:	3f 2e       	mov	r3, r31
    1f6e:	08 c0       	rjmp	.+16     	; 0x1f80 <vfprintf+0xe6>
    1f70:	8c 36       	cpi	r24, 0x6C	; 108
    1f72:	21 f4       	brne	.+8      	; 0x1f7c <vfprintf+0xe2>
    1f74:	83 2d       	mov	r24, r3
    1f76:	80 68       	ori	r24, 0x80	; 128
    1f78:	38 2e       	mov	r3, r24
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <vfprintf+0xe6>
    1f7c:	88 36       	cpi	r24, 0x68	; 104
    1f7e:	41 f4       	brne	.+16     	; 0x1f90 <vfprintf+0xf6>
    1f80:	f7 01       	movw	r30, r14
    1f82:	93 fd       	sbrc	r25, 3
    1f84:	85 91       	lpm	r24, Z+
    1f86:	93 ff       	sbrs	r25, 3
    1f88:	81 91       	ld	r24, Z+
    1f8a:	7f 01       	movw	r14, r30
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	b3 cf       	rjmp	.-154    	; 0x1ef6 <vfprintf+0x5c>
    1f90:	98 2f       	mov	r25, r24
    1f92:	9f 7d       	andi	r25, 0xDF	; 223
    1f94:	95 54       	subi	r25, 0x45	; 69
    1f96:	93 30       	cpi	r25, 0x03	; 3
    1f98:	28 f4       	brcc	.+10     	; 0x1fa4 <vfprintf+0x10a>
    1f9a:	0c 5f       	subi	r16, 0xFC	; 252
    1f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9e:	9f e3       	ldi	r25, 0x3F	; 63
    1fa0:	99 83       	std	Y+1, r25	; 0x01
    1fa2:	0d c0       	rjmp	.+26     	; 0x1fbe <vfprintf+0x124>
    1fa4:	83 36       	cpi	r24, 0x63	; 99
    1fa6:	31 f0       	breq	.+12     	; 0x1fb4 <vfprintf+0x11a>
    1fa8:	83 37       	cpi	r24, 0x73	; 115
    1faa:	71 f0       	breq	.+28     	; 0x1fc8 <vfprintf+0x12e>
    1fac:	83 35       	cpi	r24, 0x53	; 83
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <vfprintf+0x118>
    1fb0:	59 c0       	rjmp	.+178    	; 0x2064 <vfprintf+0x1ca>
    1fb2:	21 c0       	rjmp	.+66     	; 0x1ff6 <vfprintf+0x15c>
    1fb4:	f8 01       	movw	r30, r16
    1fb6:	80 81       	ld	r24, Z
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	0e 5f       	subi	r16, 0xFE	; 254
    1fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbe:	88 24       	eor	r8, r8
    1fc0:	83 94       	inc	r8
    1fc2:	91 2c       	mov	r9, r1
    1fc4:	53 01       	movw	r10, r6
    1fc6:	13 c0       	rjmp	.+38     	; 0x1fee <vfprintf+0x154>
    1fc8:	28 01       	movw	r4, r16
    1fca:	f2 e0       	ldi	r31, 0x02	; 2
    1fcc:	4f 0e       	add	r4, r31
    1fce:	51 1c       	adc	r5, r1
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	a0 80       	ld	r10, Z
    1fd4:	b1 80       	ldd	r11, Z+1	; 0x01
    1fd6:	36 fe       	sbrs	r3, 6
    1fd8:	03 c0       	rjmp	.+6      	; 0x1fe0 <vfprintf+0x146>
    1fda:	69 2d       	mov	r22, r9
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <vfprintf+0x14a>
    1fe0:	6f ef       	ldi	r22, 0xFF	; 255
    1fe2:	7f ef       	ldi	r23, 0xFF	; 255
    1fe4:	c5 01       	movw	r24, r10
    1fe6:	0e 94 39 11 	call	0x2272	; 0x2272 <strnlen>
    1fea:	4c 01       	movw	r8, r24
    1fec:	82 01       	movw	r16, r4
    1fee:	f3 2d       	mov	r31, r3
    1ff0:	ff 77       	andi	r31, 0x7F	; 127
    1ff2:	3f 2e       	mov	r3, r31
    1ff4:	16 c0       	rjmp	.+44     	; 0x2022 <vfprintf+0x188>
    1ff6:	28 01       	movw	r4, r16
    1ff8:	22 e0       	ldi	r18, 0x02	; 2
    1ffa:	42 0e       	add	r4, r18
    1ffc:	51 1c       	adc	r5, r1
    1ffe:	f8 01       	movw	r30, r16
    2000:	a0 80       	ld	r10, Z
    2002:	b1 80       	ldd	r11, Z+1	; 0x01
    2004:	36 fe       	sbrs	r3, 6
    2006:	03 c0       	rjmp	.+6      	; 0x200e <vfprintf+0x174>
    2008:	69 2d       	mov	r22, r9
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <vfprintf+0x178>
    200e:	6f ef       	ldi	r22, 0xFF	; 255
    2010:	7f ef       	ldi	r23, 0xFF	; 255
    2012:	c5 01       	movw	r24, r10
    2014:	0e 94 2e 11 	call	0x225c	; 0x225c <strnlen_P>
    2018:	4c 01       	movw	r8, r24
    201a:	f3 2d       	mov	r31, r3
    201c:	f0 68       	ori	r31, 0x80	; 128
    201e:	3f 2e       	mov	r3, r31
    2020:	82 01       	movw	r16, r4
    2022:	33 fc       	sbrc	r3, 3
    2024:	1b c0       	rjmp	.+54     	; 0x205c <vfprintf+0x1c2>
    2026:	82 2d       	mov	r24, r2
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	88 16       	cp	r8, r24
    202c:	99 06       	cpc	r9, r25
    202e:	b0 f4       	brcc	.+44     	; 0x205c <vfprintf+0x1c2>
    2030:	b6 01       	movw	r22, r12
    2032:	80 e2       	ldi	r24, 0x20	; 32
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 44 11 	call	0x2288	; 0x2288 <fputc>
    203a:	2a 94       	dec	r2
    203c:	f4 cf       	rjmp	.-24     	; 0x2026 <vfprintf+0x18c>
    203e:	f5 01       	movw	r30, r10
    2040:	37 fc       	sbrc	r3, 7
    2042:	85 91       	lpm	r24, Z+
    2044:	37 fe       	sbrs	r3, 7
    2046:	81 91       	ld	r24, Z+
    2048:	5f 01       	movw	r10, r30
    204a:	b6 01       	movw	r22, r12
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 44 11 	call	0x2288	; 0x2288 <fputc>
    2052:	21 10       	cpse	r2, r1
    2054:	2a 94       	dec	r2
    2056:	21 e0       	ldi	r18, 0x01	; 1
    2058:	82 1a       	sub	r8, r18
    205a:	91 08       	sbc	r9, r1
    205c:	81 14       	cp	r8, r1
    205e:	91 04       	cpc	r9, r1
    2060:	71 f7       	brne	.-36     	; 0x203e <vfprintf+0x1a4>
    2062:	e8 c0       	rjmp	.+464    	; 0x2234 <vfprintf+0x39a>
    2064:	84 36       	cpi	r24, 0x64	; 100
    2066:	11 f0       	breq	.+4      	; 0x206c <vfprintf+0x1d2>
    2068:	89 36       	cpi	r24, 0x69	; 105
    206a:	41 f5       	brne	.+80     	; 0x20bc <vfprintf+0x222>
    206c:	f8 01       	movw	r30, r16
    206e:	37 fe       	sbrs	r3, 7
    2070:	07 c0       	rjmp	.+14     	; 0x2080 <vfprintf+0x1e6>
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	0c 5f       	subi	r16, 0xFC	; 252
    207c:	1f 4f       	sbci	r17, 0xFF	; 255
    207e:	08 c0       	rjmp	.+16     	; 0x2090 <vfprintf+0x1f6>
    2080:	60 81       	ld	r22, Z
    2082:	71 81       	ldd	r23, Z+1	; 0x01
    2084:	07 2e       	mov	r0, r23
    2086:	00 0c       	add	r0, r0
    2088:	88 0b       	sbc	r24, r24
    208a:	99 0b       	sbc	r25, r25
    208c:	0e 5f       	subi	r16, 0xFE	; 254
    208e:	1f 4f       	sbci	r17, 0xFF	; 255
    2090:	f3 2d       	mov	r31, r3
    2092:	ff 76       	andi	r31, 0x6F	; 111
    2094:	3f 2e       	mov	r3, r31
    2096:	97 ff       	sbrs	r25, 7
    2098:	09 c0       	rjmp	.+18     	; 0x20ac <vfprintf+0x212>
    209a:	90 95       	com	r25
    209c:	80 95       	com	r24
    209e:	70 95       	com	r23
    20a0:	61 95       	neg	r22
    20a2:	7f 4f       	sbci	r23, 0xFF	; 255
    20a4:	8f 4f       	sbci	r24, 0xFF	; 255
    20a6:	9f 4f       	sbci	r25, 0xFF	; 255
    20a8:	f0 68       	ori	r31, 0x80	; 128
    20aa:	3f 2e       	mov	r3, r31
    20ac:	2a e0       	ldi	r18, 0x0A	; 10
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	a3 01       	movw	r20, r6
    20b2:	0e 94 80 11 	call	0x2300	; 0x2300 <__ultoa_invert>
    20b6:	88 2e       	mov	r8, r24
    20b8:	86 18       	sub	r8, r6
    20ba:	45 c0       	rjmp	.+138    	; 0x2146 <vfprintf+0x2ac>
    20bc:	85 37       	cpi	r24, 0x75	; 117
    20be:	31 f4       	brne	.+12     	; 0x20cc <vfprintf+0x232>
    20c0:	23 2d       	mov	r18, r3
    20c2:	2f 7e       	andi	r18, 0xEF	; 239
    20c4:	b2 2e       	mov	r11, r18
    20c6:	2a e0       	ldi	r18, 0x0A	; 10
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	25 c0       	rjmp	.+74     	; 0x2116 <vfprintf+0x27c>
    20cc:	93 2d       	mov	r25, r3
    20ce:	99 7f       	andi	r25, 0xF9	; 249
    20d0:	b9 2e       	mov	r11, r25
    20d2:	8f 36       	cpi	r24, 0x6F	; 111
    20d4:	c1 f0       	breq	.+48     	; 0x2106 <vfprintf+0x26c>
    20d6:	18 f4       	brcc	.+6      	; 0x20de <vfprintf+0x244>
    20d8:	88 35       	cpi	r24, 0x58	; 88
    20da:	79 f0       	breq	.+30     	; 0x20fa <vfprintf+0x260>
    20dc:	b5 c0       	rjmp	.+362    	; 0x2248 <vfprintf+0x3ae>
    20de:	80 37       	cpi	r24, 0x70	; 112
    20e0:	19 f0       	breq	.+6      	; 0x20e8 <vfprintf+0x24e>
    20e2:	88 37       	cpi	r24, 0x78	; 120
    20e4:	21 f0       	breq	.+8      	; 0x20ee <vfprintf+0x254>
    20e6:	b0 c0       	rjmp	.+352    	; 0x2248 <vfprintf+0x3ae>
    20e8:	e9 2f       	mov	r30, r25
    20ea:	e0 61       	ori	r30, 0x10	; 16
    20ec:	be 2e       	mov	r11, r30
    20ee:	b4 fe       	sbrs	r11, 4
    20f0:	0d c0       	rjmp	.+26     	; 0x210c <vfprintf+0x272>
    20f2:	fb 2d       	mov	r31, r11
    20f4:	f4 60       	ori	r31, 0x04	; 4
    20f6:	bf 2e       	mov	r11, r31
    20f8:	09 c0       	rjmp	.+18     	; 0x210c <vfprintf+0x272>
    20fa:	34 fe       	sbrs	r3, 4
    20fc:	0a c0       	rjmp	.+20     	; 0x2112 <vfprintf+0x278>
    20fe:	29 2f       	mov	r18, r25
    2100:	26 60       	ori	r18, 0x06	; 6
    2102:	b2 2e       	mov	r11, r18
    2104:	06 c0       	rjmp	.+12     	; 0x2112 <vfprintf+0x278>
    2106:	28 e0       	ldi	r18, 0x08	; 8
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	05 c0       	rjmp	.+10     	; 0x2116 <vfprintf+0x27c>
    210c:	20 e1       	ldi	r18, 0x10	; 16
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <vfprintf+0x27c>
    2112:	20 e1       	ldi	r18, 0x10	; 16
    2114:	32 e0       	ldi	r19, 0x02	; 2
    2116:	f8 01       	movw	r30, r16
    2118:	b7 fe       	sbrs	r11, 7
    211a:	07 c0       	rjmp	.+14     	; 0x212a <vfprintf+0x290>
    211c:	60 81       	ld	r22, Z
    211e:	71 81       	ldd	r23, Z+1	; 0x01
    2120:	82 81       	ldd	r24, Z+2	; 0x02
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	0c 5f       	subi	r16, 0xFC	; 252
    2126:	1f 4f       	sbci	r17, 0xFF	; 255
    2128:	06 c0       	rjmp	.+12     	; 0x2136 <vfprintf+0x29c>
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 5f       	subi	r16, 0xFE	; 254
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	a3 01       	movw	r20, r6
    2138:	0e 94 80 11 	call	0x2300	; 0x2300 <__ultoa_invert>
    213c:	88 2e       	mov	r8, r24
    213e:	86 18       	sub	r8, r6
    2140:	fb 2d       	mov	r31, r11
    2142:	ff 77       	andi	r31, 0x7F	; 127
    2144:	3f 2e       	mov	r3, r31
    2146:	36 fe       	sbrs	r3, 6
    2148:	0d c0       	rjmp	.+26     	; 0x2164 <vfprintf+0x2ca>
    214a:	23 2d       	mov	r18, r3
    214c:	2e 7f       	andi	r18, 0xFE	; 254
    214e:	a2 2e       	mov	r10, r18
    2150:	89 14       	cp	r8, r9
    2152:	58 f4       	brcc	.+22     	; 0x216a <vfprintf+0x2d0>
    2154:	34 fe       	sbrs	r3, 4
    2156:	0b c0       	rjmp	.+22     	; 0x216e <vfprintf+0x2d4>
    2158:	32 fc       	sbrc	r3, 2
    215a:	09 c0       	rjmp	.+18     	; 0x216e <vfprintf+0x2d4>
    215c:	83 2d       	mov	r24, r3
    215e:	8e 7e       	andi	r24, 0xEE	; 238
    2160:	a8 2e       	mov	r10, r24
    2162:	05 c0       	rjmp	.+10     	; 0x216e <vfprintf+0x2d4>
    2164:	b8 2c       	mov	r11, r8
    2166:	a3 2c       	mov	r10, r3
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <vfprintf+0x2d6>
    216a:	b8 2c       	mov	r11, r8
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <vfprintf+0x2d6>
    216e:	b9 2c       	mov	r11, r9
    2170:	a4 fe       	sbrs	r10, 4
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <vfprintf+0x2f8>
    2174:	fe 01       	movw	r30, r28
    2176:	e8 0d       	add	r30, r8
    2178:	f1 1d       	adc	r31, r1
    217a:	80 81       	ld	r24, Z
    217c:	80 33       	cpi	r24, 0x30	; 48
    217e:	21 f4       	brne	.+8      	; 0x2188 <vfprintf+0x2ee>
    2180:	9a 2d       	mov	r25, r10
    2182:	99 7e       	andi	r25, 0xE9	; 233
    2184:	a9 2e       	mov	r10, r25
    2186:	09 c0       	rjmp	.+18     	; 0x219a <vfprintf+0x300>
    2188:	a2 fe       	sbrs	r10, 2
    218a:	06 c0       	rjmp	.+12     	; 0x2198 <vfprintf+0x2fe>
    218c:	b3 94       	inc	r11
    218e:	b3 94       	inc	r11
    2190:	04 c0       	rjmp	.+8      	; 0x219a <vfprintf+0x300>
    2192:	8a 2d       	mov	r24, r10
    2194:	86 78       	andi	r24, 0x86	; 134
    2196:	09 f0       	breq	.+2      	; 0x219a <vfprintf+0x300>
    2198:	b3 94       	inc	r11
    219a:	a3 fc       	sbrc	r10, 3
    219c:	11 c0       	rjmp	.+34     	; 0x21c0 <vfprintf+0x326>
    219e:	a0 fe       	sbrs	r10, 0
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <vfprintf+0x314>
    21a2:	b2 14       	cp	r11, r2
    21a4:	88 f4       	brcc	.+34     	; 0x21c8 <vfprintf+0x32e>
    21a6:	28 0c       	add	r2, r8
    21a8:	92 2c       	mov	r9, r2
    21aa:	9b 18       	sub	r9, r11
    21ac:	0e c0       	rjmp	.+28     	; 0x21ca <vfprintf+0x330>
    21ae:	b2 14       	cp	r11, r2
    21b0:	60 f4       	brcc	.+24     	; 0x21ca <vfprintf+0x330>
    21b2:	b6 01       	movw	r22, r12
    21b4:	80 e2       	ldi	r24, 0x20	; 32
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 44 11 	call	0x2288	; 0x2288 <fputc>
    21bc:	b3 94       	inc	r11
    21be:	f7 cf       	rjmp	.-18     	; 0x21ae <vfprintf+0x314>
    21c0:	b2 14       	cp	r11, r2
    21c2:	18 f4       	brcc	.+6      	; 0x21ca <vfprintf+0x330>
    21c4:	2b 18       	sub	r2, r11
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <vfprintf+0x332>
    21c8:	98 2c       	mov	r9, r8
    21ca:	21 2c       	mov	r2, r1
    21cc:	a4 fe       	sbrs	r10, 4
    21ce:	10 c0       	rjmp	.+32     	; 0x21f0 <vfprintf+0x356>
    21d0:	b6 01       	movw	r22, r12
    21d2:	80 e3       	ldi	r24, 0x30	; 48
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 44 11 	call	0x2288	; 0x2288 <fputc>
    21da:	a2 fe       	sbrs	r10, 2
    21dc:	17 c0       	rjmp	.+46     	; 0x220c <vfprintf+0x372>
    21de:	a1 fc       	sbrc	r10, 1
    21e0:	03 c0       	rjmp	.+6      	; 0x21e8 <vfprintf+0x34e>
    21e2:	88 e7       	ldi	r24, 0x78	; 120
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <vfprintf+0x352>
    21e8:	88 e5       	ldi	r24, 0x58	; 88
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	b6 01       	movw	r22, r12
    21ee:	0c c0       	rjmp	.+24     	; 0x2208 <vfprintf+0x36e>
    21f0:	8a 2d       	mov	r24, r10
    21f2:	86 78       	andi	r24, 0x86	; 134
    21f4:	59 f0       	breq	.+22     	; 0x220c <vfprintf+0x372>
    21f6:	a1 fe       	sbrs	r10, 1
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <vfprintf+0x364>
    21fa:	8b e2       	ldi	r24, 0x2B	; 43
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <vfprintf+0x366>
    21fe:	80 e2       	ldi	r24, 0x20	; 32
    2200:	a7 fc       	sbrc	r10, 7
    2202:	8d e2       	ldi	r24, 0x2D	; 45
    2204:	b6 01       	movw	r22, r12
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 44 11 	call	0x2288	; 0x2288 <fputc>
    220c:	89 14       	cp	r8, r9
    220e:	38 f4       	brcc	.+14     	; 0x221e <vfprintf+0x384>
    2210:	b6 01       	movw	r22, r12
    2212:	80 e3       	ldi	r24, 0x30	; 48
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 44 11 	call	0x2288	; 0x2288 <fputc>
    221a:	9a 94       	dec	r9
    221c:	f7 cf       	rjmp	.-18     	; 0x220c <vfprintf+0x372>
    221e:	8a 94       	dec	r8
    2220:	f3 01       	movw	r30, r6
    2222:	e8 0d       	add	r30, r8
    2224:	f1 1d       	adc	r31, r1
    2226:	80 81       	ld	r24, Z
    2228:	b6 01       	movw	r22, r12
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 44 11 	call	0x2288	; 0x2288 <fputc>
    2230:	81 10       	cpse	r8, r1
    2232:	f5 cf       	rjmp	.-22     	; 0x221e <vfprintf+0x384>
    2234:	22 20       	and	r2, r2
    2236:	09 f4       	brne	.+2      	; 0x223a <vfprintf+0x3a0>
    2238:	42 ce       	rjmp	.-892    	; 0x1ebe <vfprintf+0x24>
    223a:	b6 01       	movw	r22, r12
    223c:	80 e2       	ldi	r24, 0x20	; 32
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0e 94 44 11 	call	0x2288	; 0x2288 <fputc>
    2244:	2a 94       	dec	r2
    2246:	f6 cf       	rjmp	.-20     	; 0x2234 <vfprintf+0x39a>
    2248:	f6 01       	movw	r30, r12
    224a:	86 81       	ldd	r24, Z+6	; 0x06
    224c:	97 81       	ldd	r25, Z+7	; 0x07
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <vfprintf+0x3ba>
    2250:	8f ef       	ldi	r24, 0xFF	; 255
    2252:	9f ef       	ldi	r25, 0xFF	; 255
    2254:	2b 96       	adiw	r28, 0x0b	; 11
    2256:	e2 e1       	ldi	r30, 0x12	; 18
    2258:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__epilogue_restores__>

0000225c <strnlen_P>:
    225c:	fc 01       	movw	r30, r24
    225e:	05 90       	lpm	r0, Z+
    2260:	61 50       	subi	r22, 0x01	; 1
    2262:	70 40       	sbci	r23, 0x00	; 0
    2264:	01 10       	cpse	r0, r1
    2266:	d8 f7       	brcc	.-10     	; 0x225e <strnlen_P+0x2>
    2268:	80 95       	com	r24
    226a:	90 95       	com	r25
    226c:	8e 0f       	add	r24, r30
    226e:	9f 1f       	adc	r25, r31
    2270:	08 95       	ret

00002272 <strnlen>:
    2272:	fc 01       	movw	r30, r24
    2274:	61 50       	subi	r22, 0x01	; 1
    2276:	70 40       	sbci	r23, 0x00	; 0
    2278:	01 90       	ld	r0, Z+
    227a:	01 10       	cpse	r0, r1
    227c:	d8 f7       	brcc	.-10     	; 0x2274 <strnlen+0x2>
    227e:	80 95       	com	r24
    2280:	90 95       	com	r25
    2282:	8e 0f       	add	r24, r30
    2284:	9f 1f       	adc	r25, r31
    2286:	08 95       	ret

00002288 <fputc>:
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	fb 01       	movw	r30, r22
    2292:	23 81       	ldd	r18, Z+3	; 0x03
    2294:	21 fd       	sbrc	r18, 1
    2296:	03 c0       	rjmp	.+6      	; 0x229e <fputc+0x16>
    2298:	8f ef       	ldi	r24, 0xFF	; 255
    229a:	9f ef       	ldi	r25, 0xFF	; 255
    229c:	2c c0       	rjmp	.+88     	; 0x22f6 <fputc+0x6e>
    229e:	22 ff       	sbrs	r18, 2
    22a0:	16 c0       	rjmp	.+44     	; 0x22ce <fputc+0x46>
    22a2:	46 81       	ldd	r20, Z+6	; 0x06
    22a4:	57 81       	ldd	r21, Z+7	; 0x07
    22a6:	24 81       	ldd	r18, Z+4	; 0x04
    22a8:	35 81       	ldd	r19, Z+5	; 0x05
    22aa:	42 17       	cp	r20, r18
    22ac:	53 07       	cpc	r21, r19
    22ae:	44 f4       	brge	.+16     	; 0x22c0 <fputc+0x38>
    22b0:	a0 81       	ld	r26, Z
    22b2:	b1 81       	ldd	r27, Z+1	; 0x01
    22b4:	9d 01       	movw	r18, r26
    22b6:	2f 5f       	subi	r18, 0xFF	; 255
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ba:	31 83       	std	Z+1, r19	; 0x01
    22bc:	20 83       	st	Z, r18
    22be:	8c 93       	st	X, r24
    22c0:	26 81       	ldd	r18, Z+6	; 0x06
    22c2:	37 81       	ldd	r19, Z+7	; 0x07
    22c4:	2f 5f       	subi	r18, 0xFF	; 255
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
    22c8:	37 83       	std	Z+7, r19	; 0x07
    22ca:	26 83       	std	Z+6, r18	; 0x06
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <fputc+0x6e>
    22ce:	8b 01       	movw	r16, r22
    22d0:	ec 01       	movw	r28, r24
    22d2:	fb 01       	movw	r30, r22
    22d4:	00 84       	ldd	r0, Z+8	; 0x08
    22d6:	f1 85       	ldd	r31, Z+9	; 0x09
    22d8:	e0 2d       	mov	r30, r0
    22da:	09 95       	icall
    22dc:	89 2b       	or	r24, r25
    22de:	e1 f6       	brne	.-72     	; 0x2298 <fputc+0x10>
    22e0:	d8 01       	movw	r26, r16
    22e2:	16 96       	adiw	r26, 0x06	; 6
    22e4:	8d 91       	ld	r24, X+
    22e6:	9c 91       	ld	r25, X
    22e8:	17 97       	sbiw	r26, 0x07	; 7
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	17 96       	adiw	r26, 0x07	; 7
    22ee:	9c 93       	st	X, r25
    22f0:	8e 93       	st	-X, r24
    22f2:	16 97       	sbiw	r26, 0x06	; 6
    22f4:	ce 01       	movw	r24, r28
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	08 95       	ret

00002300 <__ultoa_invert>:
    2300:	fa 01       	movw	r30, r20
    2302:	aa 27       	eor	r26, r26
    2304:	28 30       	cpi	r18, 0x08	; 8
    2306:	51 f1       	breq	.+84     	; 0x235c <__ultoa_invert+0x5c>
    2308:	20 31       	cpi	r18, 0x10	; 16
    230a:	81 f1       	breq	.+96     	; 0x236c <__ultoa_invert+0x6c>
    230c:	e8 94       	clt
    230e:	6f 93       	push	r22
    2310:	6e 7f       	andi	r22, 0xFE	; 254
    2312:	6e 5f       	subi	r22, 0xFE	; 254
    2314:	7f 4f       	sbci	r23, 0xFF	; 255
    2316:	8f 4f       	sbci	r24, 0xFF	; 255
    2318:	9f 4f       	sbci	r25, 0xFF	; 255
    231a:	af 4f       	sbci	r26, 0xFF	; 255
    231c:	b1 e0       	ldi	r27, 0x01	; 1
    231e:	3e d0       	rcall	.+124    	; 0x239c <__ultoa_invert+0x9c>
    2320:	b4 e0       	ldi	r27, 0x04	; 4
    2322:	3c d0       	rcall	.+120    	; 0x239c <__ultoa_invert+0x9c>
    2324:	67 0f       	add	r22, r23
    2326:	78 1f       	adc	r23, r24
    2328:	89 1f       	adc	r24, r25
    232a:	9a 1f       	adc	r25, r26
    232c:	a1 1d       	adc	r26, r1
    232e:	68 0f       	add	r22, r24
    2330:	79 1f       	adc	r23, r25
    2332:	8a 1f       	adc	r24, r26
    2334:	91 1d       	adc	r25, r1
    2336:	a1 1d       	adc	r26, r1
    2338:	6a 0f       	add	r22, r26
    233a:	71 1d       	adc	r23, r1
    233c:	81 1d       	adc	r24, r1
    233e:	91 1d       	adc	r25, r1
    2340:	a1 1d       	adc	r26, r1
    2342:	20 d0       	rcall	.+64     	; 0x2384 <__ultoa_invert+0x84>
    2344:	09 f4       	brne	.+2      	; 0x2348 <__ultoa_invert+0x48>
    2346:	68 94       	set
    2348:	3f 91       	pop	r19
    234a:	2a e0       	ldi	r18, 0x0A	; 10
    234c:	26 9f       	mul	r18, r22
    234e:	11 24       	eor	r1, r1
    2350:	30 19       	sub	r19, r0
    2352:	30 5d       	subi	r19, 0xD0	; 208
    2354:	31 93       	st	Z+, r19
    2356:	de f6       	brtc	.-74     	; 0x230e <__ultoa_invert+0xe>
    2358:	cf 01       	movw	r24, r30
    235a:	08 95       	ret
    235c:	46 2f       	mov	r20, r22
    235e:	47 70       	andi	r20, 0x07	; 7
    2360:	40 5d       	subi	r20, 0xD0	; 208
    2362:	41 93       	st	Z+, r20
    2364:	b3 e0       	ldi	r27, 0x03	; 3
    2366:	0f d0       	rcall	.+30     	; 0x2386 <__ultoa_invert+0x86>
    2368:	c9 f7       	brne	.-14     	; 0x235c <__ultoa_invert+0x5c>
    236a:	f6 cf       	rjmp	.-20     	; 0x2358 <__ultoa_invert+0x58>
    236c:	46 2f       	mov	r20, r22
    236e:	4f 70       	andi	r20, 0x0F	; 15
    2370:	40 5d       	subi	r20, 0xD0	; 208
    2372:	4a 33       	cpi	r20, 0x3A	; 58
    2374:	18 f0       	brcs	.+6      	; 0x237c <__ultoa_invert+0x7c>
    2376:	49 5d       	subi	r20, 0xD9	; 217
    2378:	31 fd       	sbrc	r19, 1
    237a:	40 52       	subi	r20, 0x20	; 32
    237c:	41 93       	st	Z+, r20
    237e:	02 d0       	rcall	.+4      	; 0x2384 <__ultoa_invert+0x84>
    2380:	a9 f7       	brne	.-22     	; 0x236c <__ultoa_invert+0x6c>
    2382:	ea cf       	rjmp	.-44     	; 0x2358 <__ultoa_invert+0x58>
    2384:	b4 e0       	ldi	r27, 0x04	; 4
    2386:	a6 95       	lsr	r26
    2388:	97 95       	ror	r25
    238a:	87 95       	ror	r24
    238c:	77 95       	ror	r23
    238e:	67 95       	ror	r22
    2390:	ba 95       	dec	r27
    2392:	c9 f7       	brne	.-14     	; 0x2386 <__ultoa_invert+0x86>
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	61 05       	cpc	r22, r1
    2398:	71 05       	cpc	r23, r1
    239a:	08 95       	ret
    239c:	9b 01       	movw	r18, r22
    239e:	ac 01       	movw	r20, r24
    23a0:	0a 2e       	mov	r0, r26
    23a2:	06 94       	lsr	r0
    23a4:	57 95       	ror	r21
    23a6:	47 95       	ror	r20
    23a8:	37 95       	ror	r19
    23aa:	27 95       	ror	r18
    23ac:	ba 95       	dec	r27
    23ae:	c9 f7       	brne	.-14     	; 0x23a2 <__ultoa_invert+0xa2>
    23b0:	62 0f       	add	r22, r18
    23b2:	73 1f       	adc	r23, r19
    23b4:	84 1f       	adc	r24, r20
    23b6:	95 1f       	adc	r25, r21
    23b8:	a0 1d       	adc	r26, r0
    23ba:	08 95       	ret

000023bc <__prologue_saves__>:
    23bc:	2f 92       	push	r2
    23be:	3f 92       	push	r3
    23c0:	4f 92       	push	r4
    23c2:	5f 92       	push	r5
    23c4:	6f 92       	push	r6
    23c6:	7f 92       	push	r7
    23c8:	8f 92       	push	r8
    23ca:	9f 92       	push	r9
    23cc:	af 92       	push	r10
    23ce:	bf 92       	push	r11
    23d0:	cf 92       	push	r12
    23d2:	df 92       	push	r13
    23d4:	ef 92       	push	r14
    23d6:	ff 92       	push	r15
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	ca 1b       	sub	r28, r26
    23e6:	db 0b       	sbc	r29, r27
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	09 94       	ijmp

000023f4 <__epilogue_restores__>:
    23f4:	2a 88       	ldd	r2, Y+18	; 0x12
    23f6:	39 88       	ldd	r3, Y+17	; 0x11
    23f8:	48 88       	ldd	r4, Y+16	; 0x10
    23fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    23fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    23fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2400:	8c 84       	ldd	r8, Y+12	; 0x0c
    2402:	9b 84       	ldd	r9, Y+11	; 0x0b
    2404:	aa 84       	ldd	r10, Y+10	; 0x0a
    2406:	b9 84       	ldd	r11, Y+9	; 0x09
    2408:	c8 84       	ldd	r12, Y+8	; 0x08
    240a:	df 80       	ldd	r13, Y+7	; 0x07
    240c:	ee 80       	ldd	r14, Y+6	; 0x06
    240e:	fd 80       	ldd	r15, Y+5	; 0x05
    2410:	0c 81       	ldd	r16, Y+4	; 0x04
    2412:	1b 81       	ldd	r17, Y+3	; 0x03
    2414:	aa 81       	ldd	r26, Y+2	; 0x02
    2416:	b9 81       	ldd	r27, Y+1	; 0x01
    2418:	ce 0f       	add	r28, r30
    241a:	d1 1d       	adc	r29, r1
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	ed 01       	movw	r28, r26
    2428:	08 95       	ret

0000242a <_exit>:
    242a:	f8 94       	cli

0000242c <__stop_program>:
    242c:	ff cf       	rjmp	.-2      	; 0x242c <__stop_program>
